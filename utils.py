
# utils.py
import logging
import re
import pandas as pd
from pathlib import Path
import json 

# –§–∞–π–ª—ã
LOG_FILE = 'logs/parser.log'
COUNTER_FILE = 'logs/run_counter.json'


def get_run_count():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ (—Å—á—ë—Ç—á–∏–∫)"""
    path = Path(COUNTER_FILE)
    path.parent.mkdir(exist_ok=True)  # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É logs, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç

    if path.exists():
        try:
            data = path.read_text(encoding='utf-8')
            count = json.loads(data).get("count", 0) + 1
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞ –∑–∞–ø—É—Å–∫–æ–≤: {e}")
            count = 1
    else:
        count = 1

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Å—á—ë—Ç—á–∏–∫
    path.write_text(
        json.dumps({"count": count}, ensure_ascii=False, indent=2),
        encoding='utf-8'
    )
    return count


def setup_logger():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–≥–µ—Ä —Å —Ä–æ—Ç–∞—Ü–∏–µ–π parser.log –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø—É—Å–∫–æ–≤"""
    import json  # ‚Üê –ª–æ–∫–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –¥—Ä—É–≥–∏–º

    count = get_run_count()
    log_path = Path(LOG_FILE)

    # –ö–∞–∂–¥—ã–µ 10 –∑–∞–ø—É—Å–∫–æ–≤ ‚Äî –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –ª–æ–≥-—Ñ–∞–π–ª
    if count % 10 == 1:
        if log_path.exists():
            log_path.unlink()
            print(f"parser.log –æ—á–∏—â–µ–Ω (–∑–∞–ø—É—Å–∫ ‚Ññ{count})")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
    logger = logging.getLogger("parser")
    logger.setLevel(logging.INFO)

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–µ–π)
    if logger.handlers:
        logger.handlers.clear()

    # –§–æ—Ä–º–∞—Ç
    formatter = logging.Formatter(
        '%(asctime)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )

    # File Handler
    file_handler = logging.FileHandler(log_path, encoding='utf-8', mode='a')
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)

    # Console Handler
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)

    logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ ‚Ññ{count}")

    return logger


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
logger = setup_logger()


# === –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ===
def parse_price(text):
    if not text or not isinstance(text, str):
        return None
    clean = re.sub(r"[^\d,\.\s]", "", text).strip().replace(" ", "")
    if clean.count(",") == 1 and clean.count(".") == 0:
        clean = clean.replace(",", ".")
    elif clean.count(",") > 1:
        clean = clean.replace(",", "")
    try:
        return float(clean)
    except (ValueError, AttributeError):
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ü–µ–Ω—É: {text}")
        return None


# def preprocess_dataframe(df):
#     try:
#         brand_col_idx = 2
#         if len(df.columns) > brand_col_idx:
#             df.iloc[:, brand_col_idx] = (
#                 df.iloc[:, brand_col_idx]
#                 .astype(str)
#                 .str.replace('/', '', regex=False)
#                 .str.replace('\\', '', regex=False)
#                 .str.strip()
#             )
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
#     return df

def preprocess_dataframe(df):
    from config import INPUT_COL_BRAND  # ‚Üê –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å

    if INPUT_COL_BRAND in df.columns:
        df[INPUT_COL_BRAND] = (
            df[INPUT_COL_BRAND]
            .astype(str)
            .str.replace('/', '', regex=False)
            .str.replace('\\', '', regex=False)
            .str.strip()
        )
    else:
        logger.warning(f"‚ö†Ô∏è –°—Ç–æ–ª–±–µ—Ü '{INPUT_COL_BRAND}' –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–µ")
    return df


def normalize_brand(brand_str):
    if not brand_str:
        return ""
    return re.sub(r'[^a-z0-9]', '', str(brand_str).lower())

def brand_matches(search_brand, result_brand):
    if not search_brand or not result_brand:
        return False
    norm_search = normalize_brand(search_brand)
    norm_result = normalize_brand(result_brand)
    return norm_search in norm_result or norm_result in norm_search
