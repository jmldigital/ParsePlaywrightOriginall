
# auth.py
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from config import SELECTORS, COOKIE_FILE
from utils import logger
import time
import json
from pathlib import Path
import threading

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ---
_login_lock = threading.Lock()
_global_login_done = False  # –§–ª–∞–≥: –∫—Ç–æ-—Ç–æ —É–∂–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏–Ω–∏–ª—Å—è

def save_cookies(driver, filepath=COOKIE_FILE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—É–∫–∏. –î–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞."""
    try:
        cookies = driver.get_cookies()
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(cookies, f, ensure_ascii=False, indent=2)
        logger.info(f"‚úÖ –ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filepath}")
    except Exception as e:
        logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É–∫–∏: {e}")

def load_cookies(driver, filepath=COOKIE_FILE):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—É–∫–∏ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    –í–∞–∂–Ω–æ: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º WebDriverWait –∑–¥–µ—Å—å.
    """
    if not Path(filepath).exists():
        logger.debug(f"‚ùå –§–∞–π–ª –∫—É–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
        return False

    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π URL, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –¥–æ–±–∞–≤–∏—Ç—å –∫—É–∫–∏
        driver.get("https://www.avtoformula.ru")

        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∫—É–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–∏
        driver.delete_all_cookies()

        with open(filepath, 'r', encoding='utf-8') as f:
            cookies = json.load(f)

        for cookie in cookies:
            # –£–¥–∞–ª—è–µ–º problematic –ø–æ–ª—è
            cookie.pop('sameSite', None)  # ‚Üê –£–¥–∞–ª—è–µ–º sameSite ‚Äî Chrome —Å–∞–º —Ä–µ—à–∏—Ç
            cookie.pop('httpOnly', None)  # ‚Üê –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å
            cookie.pop('expiry', None)    # ‚Üê –ò–Ω–æ–≥–¥–∞ –º–µ—à–∞–µ—Ç, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã

            try:
                driver.add_cookie(cookie)
            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ
                if 'Secure' in str(e) and cookie.get('secure'):
                    # –ü—Ä–æ–±–ª–µ–º–∞: –∫—É–∫–∞ secure, –Ω–æ –º—ã –Ω–∞ http? (–Ω–æ —É –Ω–∞—Å https)
                    pass
                logger.debug(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∫—É–∫–∞ {cookie.get('name')}: {e}")

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º ‚Äî —Ç–µ–ø–µ—Ä—å —Å –∫—É–∫–∞–º–∏
        driver.refresh()
        time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É

        logger.info(f"‚úÖ –ö—É–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {filepath}")
        return True
    except Exception as e:
        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É–∫: {e}")
        return False


def is_logged_in(driver):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ –Ω–∞–ª–∏—á–∏—é —Ñ—Ä–∞–∑—ã '–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫'.
    –í—ã–≤–æ–¥–∏—Ç –≤ –ª–æ–≥ —Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏.
    """
    try:
        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
        element = driver.find_element(By.XPATH, "//span[contains(text(), '–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫')]")
        
        if not element.is_displayed():
            logger.debug("‚ùå –≠–ª–µ–º–µ–Ω—Ç '–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫' –Ω–∞–π–¥–µ–Ω, –Ω–æ —Å–∫—Ä—ã—Ç")
            return False

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
        full_text = element.text.strip()
        logger.info(f"üü¢ –ù–∞–π–¥–µ–Ω–∞ –Ω–∞–¥–ø–∏—Å—å –æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: '{full_text}'")

        # –ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ –µ—Å—Ç—å –∏–º—è
        try:
            username_span = element.find_element(By.XPATH, ".//span")
            username = username_span.text.strip()
            if username:
                logger.info(f"üü¢ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {username}")
            else:
                logger.warning("üü° –ù–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–Ω—É—Ç—Ä–∏ –Ω–∞–¥–ø–∏—Å–∏")
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞–¥–ø–∏—Å–∏: {e}")

        return True

    except Exception as e:
        logger.debug(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç '–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫' –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        return False

def ensure_logged_in(driver, login, password):
    """
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –¥—Ä–∞–π–≤–µ—Ä –∑–∞–ª–æ–≥–∏–Ω–µ–Ω.
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤.
    """
    global _global_login_done

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–∏–ª–∏—Å—å –ª–∏ —É–∂–µ
    if _global_login_done:
        return True

    with _login_lock:
        # –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ (–∑–∞—â–∏—Ç–∞ –æ—Ç race condition)
        if _global_login_done:
            return True

        logger.info("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")

        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É–∫–∏
        if load_cookies(driver) and is_logged_in(driver):
            logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –∫—É–∫–∞–º —É—Å–ø–µ—à–Ω–∞")
            _global_login_done = True
            return True

        # –ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ ‚Äî –¥–µ–ª–∞–µ–º —Ä—É—á–Ω–æ–π –ª–æ–≥–∏–Ω
        logger.info("üîÑ –ö—É–∫–∏ –Ω–µ –ø–æ–º–æ–≥–ª–∏ ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä—É—á–Ω–æ–π –ª–æ–≥–∏–Ω")
        if login_manually(driver, login, password):
            save_cookies(driver)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑!
            _global_login_done = True
            logger.info("‚úÖ –†—É—á–Ω–æ–π –ª–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω, –∫—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return False

# --- –û—Ç–¥–µ–ª—å–Ω–æ –≤—ã–Ω–æ—Å–∏–º login_manually, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ ---
def login_manually(driver, login, password):
    """–†—É—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ avtoformula.ru"""
    from config import SELECTORS
    try:
        driver.get("https://www.avtoformula.ru")
        wait = WebDriverWait(driver, 15)

        # –ü–æ–ª–µ –ª–æ–≥–∏–Ω–∞
        login_el = wait.until(EC.element_to_be_clickable((By.ID, SELECTORS['avtoformula']['login_field'])))
        login_el.clear()
        login_el.send_keys(login)

        # –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è
        password_el = driver.find_element(By.ID, SELECTORS['avtoformula']['password_field'])
        password_el.clear()
        password_el.send_keys(password)

        # –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞
        submit_btn = driver.find_element(By.CSS_SELECTOR, SELECTORS['avtoformula']['login_button'])
        submit_btn.click()

        # –ñ–¥—ë–º, –ø–æ–∫–∞ —Ñ–æ—Ä–º–∞ –ª–æ–≥–∏–Ω–∞ –∏—Å—á–µ–∑–Ω–µ—Ç
        wait.until(EC.invisibility_of_element_located((By.ID, SELECTORS['avtoformula']['login_field'])))
        time.sleep(2)

        # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ A0
        smode_select = wait.until(EC.element_to_be_clickable((By.ID, SELECTORS['avtoformula']['smode_select'])))
        for option in smode_select.find_elements(By.TAG_NAME, "option"):
            if option.get_attribute("value") == "A0":
                option.click()
                break

        logger.info("‚úÖ –†—É—á–Ω–æ–π –ª–æ–≥–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞: {e}")
        return False