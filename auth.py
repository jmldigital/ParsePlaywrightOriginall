# auth_playwright_async.py
"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è Playwright
–ê–Ω–∞–ª–æ–≥ auth_playwright.py, –Ω–æ —Å async/await
"""

from playwright.async_api import Page
from config import SELECTORS, COOKIE_FILE
from utils import logger
import json
from pathlib import Path
import asyncio
import threading

_login_lock = asyncio.Lock()
_global_login_done = False


async def save_cookies(page: Page, filepath: str = COOKIE_FILE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—É–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞"""
    try:
        cookies = await page.context.cookies()
        with open(filepath, "w", encoding="utf-8") as f:
            json.dump(cookies, f, ensure_ascii=False, indent=2)
        logger.info(f"‚úÖ –ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filepath}")
    except Exception as e:
        logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É–∫–∏: {e}")


async def load_cookies(page: Page, filepath: str = COOKIE_FILE) -> bool:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—É–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    if not Path(filepath).exists():
        logger.debug(f"‚ùå –§–∞–π–ª –∫—É–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
        return False
    try:
        await page.goto("https://www.avtoformula.ru")
        with open(filepath, "r", encoding="utf-8") as f:
            cookies = json.load(f)
        await page.context.add_cookies(cookies)
        await page.reload()
        await page.wait_for_timeout(1000)
        logger.info(f"‚úÖ –ö—É–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {filepath}")
        return True
    except Exception as e:
        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É–∫: {e}")
        return False


async def is_logged_in(page: Page) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–∞–¥–ø–∏—Å–∏ '–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫'"""
    try:
        element = page.locator("xpath=//span[contains(text(), '–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫')]")
        if await element.count() == 0:
            return False
        if not await element.is_visible():
            return False
        text = (await element.text_content() or "").strip()
        logger.info(f"üü¢ –ù–∞–π–¥–µ–Ω–∞ –Ω–∞–¥–ø–∏—Å—å –æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: '{text}'")
        return True
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False


async def login_manually(page: Page, login: str, password: str) -> bool:
    """–†—É—á–Ω–æ–π –ª–æ–≥–∏–Ω –Ω–∞ —Å–∞–π—Ç–µ AvtoFormula"""
    try:
        await page.goto("https://www.avtoformula.ru")

        login_field = page.locator(f"#{SELECTORS['avtoformula']['login_field']}")
        await login_field.wait_for(state="visible", timeout=15000)
        await login_field.fill(login)

        password_field = page.locator(f"#{SELECTORS['avtoformula']['password_field']}")
        await password_field.fill(password)

        submit_btn = page.locator(SELECTORS['avtoformula']['login_button'])
        await submit_btn.click()

        # –ñ–¥—ë–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –ª–æ–≥–∏–Ω–∞
        await login_field.wait_for(state="hidden", timeout=15000)
        await page.wait_for_timeout(2000)

        # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –±–µ–∑ –∞–Ω–∞–ª–æ–≥–æ–≤ (A0)
        smode_select = page.locator(f"#{SELECTORS['avtoformula']['smode_select']}")
        await smode_select.wait_for(state="visible", timeout=15000)
        await smode_select.select_option("A0")

        logger.info("‚úÖ –†—É—á–Ω–æ–π –ª–æ–≥–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞: {e}")
        return False


async def ensure_logged_in(page: Page, login: str, password: str) -> bool:
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –º—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã"""
    global _global_login_done
    if _global_login_done:
        return True

    async with _login_lock:
        if _global_login_done:
            return True
        logger.info("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")

        # –ü—Ä–æ–±—É–µ–º –∫—É–∫–∏
        if await load_cookies(page) and await is_logged_in(page):
            logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –∫—É–∫–∞–º —É—Å–ø–µ—à–Ω–∞")
            _global_login_done = True
            return True

        # –ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ ‚Äî –¥–µ–ª–∞–µ–º —Ä—É—á–Ω–æ–π –≤—Ö–æ–¥
        if await login_manually(page, login, password):
            await save_cookies(page)
            _global_login_done = True
            logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –∏ –∫—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return False


async def check_if_logged_out(page: Page) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–ª–∏—Å—å –ª–∏ –º—ã"""
    try:
        reg_link = page.locator("a[href='/registration.html']")
        if await reg_link.count() > 0 and await reg_link.is_visible():
            logger.warning("üö™ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–∞–∑–ª–æ–≥–∏–Ω (—Å—Å—ã–ª–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)")
            return True
        if "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å" in (await page.content()).lower():
            logger.warning("üö™ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–∞–∑–ª–æ–≥–∏–Ω (–ø–æ —Ç–µ–∫—Å—Ç—É)")
            return True
        return False
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–ª–æ–≥–∏–Ω–∞: {e}")
        return False


async def handle_relogin(page: Page,  login: str, password: str) -> bool:
    """–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –ø—Ä–∏ —Ä–∞–∑–ª–æ–≥–∏–Ω–µ"""
    logger.warning(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞ –¥–ª—è ")
    try:
        if await load_cookies(page) and await is_logged_in(page):
            logger.info("‚úÖ –†–µ-–ª–æ–≥–∏–Ω —á–µ—Ä–µ–∑ –∫—É–∫–∏ —É—Å–ø–µ—à–µ–Ω")
            return True
        if await login_manually(page, login, password):
            await save_cookies(page)
            logger.info("‚úÖ –†–µ-–ª–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω")
            return True
        logger.error("‚ùå –†–µ-–ª–æ–≥–∏–Ω –Ω–µ —É–¥–∞–ª—Å—è")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ-–ª–æ–≥–∏–Ω–µ: {e}")
        return False
