# scraper_stparts.py
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from config import SELECTORS, API_KEY_2CAPTCHA
from utils import logger, parse_price, brand_matches
from twocaptcha import TwoCaptcha
import time
import re
from selenium.webdriver.support import expected_conditions as EC

def solve_image_captcha(driver):
    """–†–µ—à–µ–Ω–∏–µ –∫–∞–ø—á–∏ —á–µ—Ä–µ–∑ 2Captcha"""
    try:
        solver = TwoCaptcha(API_KEY_2CAPTCHA)
        img_el = driver.find_element(By.CSS_SELECTOR, SELECTORS['stparts']['captcha_img'])
        captcha_base64 = img_el.screenshot_as_base64

        logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ø—á—É –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤ 2Captcha")
        result = solver.normal(captcha_base64)
        captcha_text = result['code']
        logger.info(f"–ö–∞–ø—á–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: {captcha_text}")

        input_el = driver.find_element(By.CSS_SELECTOR, SELECTORS['stparts']['captcha_input'])
        input_el.clear()
        input_el.send_keys(captcha_text)

        submit_btn = driver.find_element(By.ID, SELECTORS['stparts']['captcha_submit'])
        submit_btn.click()
        time.sleep(5)  # –ñ–¥—ë–º —Ä–µ–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–ø—á–∏
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏: {e}")
        return False




# üïí –ì–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
WAIT_TIMEOUT = 8  # –Ω–∞–ø—Ä–∏–º–µ—Ä, 8 —Å–µ–∫—É–Ω–¥ ‚Äî –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ


def wait_for_results_or_no_results(driver, timeout=WAIT_TIMEOUT):
    """–ñ–¥—ë—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–ª–∏ –±–ª–æ–∫–∞ '–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'"""
    try:
        WebDriverWait(driver, timeout).until(
            lambda d: (
                d.find_elements(By.CSS_SELECTOR, SELECTORS['stparts']['results_table'])
                or d.find_elements(By.CSS_SELECTOR, "div.fr-alert.fr-alert-warning.alert-noResults")
            )
        )

        if driver.find_elements(By.CSS_SELECTOR, "div.fr-alert.fr-alert-warning.alert-noResults"):
            logger.info("üö´ –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —É–∫–∞–∑–∞–Ω –±–ª–æ–∫ '–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'")
            return "no_results"
        return "has_results"

    except TimeoutException:
        logger.warning("‚ö†Ô∏è –ò—Å—Ç—ë–∫ —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        return "timeout"


def scrape_stparts(driver, brand, part):
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å stparts.ru —Å fallback-–ø–æ–∏—Å–∫–æ–º —Ç–æ–ª—å–∫–æ –ø–æ –Ω–æ–º–µ—Ä—É –¥–µ—Ç–∞–ª–∏"""
    base_url = "https://stparts.ru"
    try:
        # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ –±—Ä–µ–Ω–¥ + –¥–µ—Ç–∞–ª—å
        url = f"{base_url}/search/{brand}/{part}"
        driver.get(url)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {url}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ø—á–∏
        try:
            WebDriverWait(driver, WAIT_TIMEOUT).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, SELECTORS['stparts']['captcha_img']))
            )
            logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞ –Ω–∞ stparts.ru")
            if not solve_image_captcha(driver):
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å –∫–∞–ø—á—É")
        except TimeoutException:
            pass  # –∫–∞–ø—á–∏ –Ω–µ—Ç - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º

        status = wait_for_results_or_no_results(driver)
        if status == "no_results":
            return None, None
        elif status == "timeout":
            logger.error(f"Timeout –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {brand} / {part}")
            return None, None

        # –û–∂–∏–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        WebDriverWait(driver, WAIT_TIMEOUT).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, SELECTORS['stparts']['results_table']))
        )
        table = driver.find_element(By.CSS_SELECTOR, SELECTORS['stparts']['results_table'])

        WebDriverWait(driver, WAIT_TIMEOUT).until(
            lambda d: len(d.find_elements(By.CSS_SELECTOR, SELECTORS['stparts']['result_row'])) > 0
        )

        rows = table.find_elements(By.CSS_SELECTOR, SELECTORS['stparts']['result_row'])
        if not rows:
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {brand} / {part}")
            return None, None

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å–Ω–∞—á–∞–ª–∞ "–≤ –Ω–∞–ª–∏—á–∏–∏" —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π 1 –¥–µ–Ω—å
        for priority_search in [True, False]:
            for row in rows:
                try:
                    brand_td = row.find_element(By.CSS_SELECTOR, SELECTORS['stparts']['brand'])
                    brand_in_row = brand_td.text.strip()

                    if not brand_matches(brand, brand_in_row):
                        continue

                    delivery_td = row.find_element(By.CSS_SELECTOR, SELECTORS['stparts']['delivery'])
                    delivery_min = delivery_td.text.strip()

                    if priority_search and not re.match(r"^1(\D|$)", delivery_min):
                        continue

                    price_text = row.find_element(By.CSS_SELECTOR, SELECTORS['stparts']['price']).text
                    price = parse_price(price_text)

                    if price is not None:
                        if priority_search:
                            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–ª–∏—á–∏–∏ (–±—Ä–µ–Ω–¥: {brand_in_row}, —Å—Ä–æ–∫ {delivery_min}): {price} ‚ÇΩ")
                        else:
                            logger.info(f"–ù–∞–π–¥–µ–Ω–æ (–±—Ä–µ–Ω–¥: {brand_in_row}, —Å—Ä–æ–∫ {delivery_min}): {price} ‚ÇΩ")
                        return price, delivery_min
                except NoSuchElementException:
                    continue

        logger.info(f"–ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {brand} / {part}")
        return None, None

    except TimeoutException:
        logger.error(f"Timeout –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {brand} / {part}")
        # –ü–æ–ø—ã—Ç–∫–∞ fallback –ø–æ–∏—Å–∫–∞ —Ç–æ–ª—å–∫–æ –ø–æ –Ω–æ–º–µ—Ä—É –¥–µ—Ç–∞–ª–∏
        try:
            fallback_url = f"{base_url}/search?pcode={part}"
            driver.get(fallback_url)
            logger.info(f"Fallback: –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±–µ–∑ –±—Ä–µ–Ω–¥–∞: {fallback_url}")

            try:
                WebDriverWait(driver, WAIT_TIMEOUT).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, SELECTORS['stparts']['captcha_img']))
                )
                logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞ –Ω–∞ stparts.ru (fallback)")
                if not solve_image_captcha(driver):
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å –∫–∞–ø—á—É (fallback)")
            except TimeoutException:
                pass

            WebDriverWait(driver, WAIT_TIMEOUT).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, SELECTORS['stparts']['results_table']))
            )
            table = driver.find_element(By.CSS_SELECTOR, SELECTORS['stparts']['results_table'])

            WebDriverWait(driver, WAIT_TIMEOUT).until(
                lambda d: len(d.find_elements(By.CSS_SELECTOR, SELECTORS['stparts']['result_row'])) > 0
            )

            rows = table.find_elements(By.CSS_SELECTOR, SELECTORS['stparts']['result_row'])
            if not rows:
                logger.info(f"Fallback: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {part}")
                return None, None

            logger.info(f"Fallback: –Ω–∞–π–¥–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

            for priority_search in [True, False]:
                for row in rows:
                    try:
                        brand_td = row.find_element(By.CSS_SELECTOR, SELECTORS['stparts']['brand'])
                        brand_in_row = brand_td.text.strip()

                        if not brand_matches(brand, brand_in_row):
                            continue

                        delivery_td = row.find_element(By.CSS_SELECTOR, SELECTORS['stparts']['delivery'])
                        delivery_min = delivery_td.text.strip()

                        if priority_search and not re.match(r"^1(\D|$)", delivery_min):
                            continue

                        price_text = row.find_element(By.CSS_SELECTOR, SELECTORS['stparts']['price']).text
                        price = parse_price(price_text)

                        if price is not None:
                            if priority_search:
                                logger.info(f"Fallback: –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–ª–∏—á–∏–∏ (–±—Ä–µ–Ω–¥: {brand_in_row}, —Å—Ä–æ–∫ {delivery_min}): {price} ‚ÇΩ")
                            else:
                                logger.info(f"Fallback: –Ω–∞–π–¥–µ–Ω–æ (–±—Ä–µ–Ω–¥: {brand_in_row}, —Å—Ä–æ–∫ {delivery_min}): {price} ‚ÇΩ")
                            return price, delivery_min
                    except NoSuchElementException:
                        continue

            logger.info(f"Fallback: –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {part}")
            return None, None

        except TimeoutException:
            logger.error(f"Fallback Timeout –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {part}")
            return None, None
        except Exception as e:
            logger.error(f"Fallback –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ stparts –¥–ª—è {part}: {e}")
            return None, None

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ stparts –¥–ª—è {brand} / {part}: {e}")
        return None, None
