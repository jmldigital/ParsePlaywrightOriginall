# price_adjuster.py
from openpyxl.styles import PatternFill
from openpyxl.utils.dataframe import dataframe_to_rows
from openpyxl import load_workbook
import pandas as pd
from config import corrected_price, competitor1, competitor2, competitor1_delivery, competitor2_delivery, input_price,INPUT_COL_ARTICLE,INPUT_COL_BRAND       
        
from utils import logger,parse_price
import re

def parse_delivery_days(delivery_str):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ 'X –¥–Ω–µ–π' –≤ int –∏–ª–∏ None"""
    if not delivery_str or not isinstance(delivery_str, str):
        return None
    m = re.search(r'(\d+)', delivery_str)
    if m:
        return int(m.group(1))
    return None





def adjust_prices_and_save(df, output_file):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç DataFrame —Å —Ü–≤–µ—Ç–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    –ü–æ–¥—Ä–æ–±–Ω–æ –ª–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.
    """

    corrected_prices = []


    for idx, row in df.iterrows():
        # logger.info("------------------------------------------------------------")
        # logger.info(f"‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ {idx + 1}/{len(df)}")

        try:
            # –ù–∞—à–∞ —Ü–µ–Ω–∞
            raw_price = row.get(input_price)
            

            our_price = parse_price(raw_price)
            if our_price is None:
                logger.warning(f"‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ü–µ–Ω—É: {raw_price}")
                corrected_prices.append(None)
                continue

            # logger.info(f"‚úÖ our_price (float): {our_price}")

            # –¶–µ–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π 1‚Äì4 –¥–Ω—è)
            competitor_prices = []

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º competitor1
            comp1_price = parse_price(row.get(competitor1))
            comp1_delivery = row.get(competitor1_delivery)
            # logger.info(f"competitor1_price: {comp1_price}, delivery: {comp1_delivery}")

            if comp1_price is not None and pd.notna(comp1_delivery):
                delivery_days = parse_delivery_days(comp1_delivery)
                if delivery_days is not None and 1 <= delivery_days <= 4:
                    competitor_prices.append(comp1_price)
                    # logger.info(f"‚úÖ competitor1 –¥–æ–±–∞–≤–ª–µ–Ω ({comp1_price} –∑–∞ {delivery_days} –¥–Ω.)")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º competitor2
            comp2_price = parse_price(row.get(competitor2))
            comp2_delivery = row.get(competitor2_delivery)
            # logger.info(f"competitor2_price: {comp2_price}, delivery: {comp2_delivery}")

            if comp2_price is not None and pd.notna(comp2_delivery):
                delivery_days = parse_delivery_days(comp2_delivery)
                if delivery_days is not None and 1 <= delivery_days <= 4:
                    competitor_prices.append(comp2_price)
                    # logger.info(f"‚úÖ competitor2 –¥–æ–±–∞–≤–ª–µ–Ω ({comp2_price} –∑–∞ {delivery_days} –¥–Ω.)")

            # –õ–æ–≥–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
            if not competitor_prices:
                corrected_prices.append(our_price)
                # logger.info("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤, —Ü–µ–Ω–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
            else:
                min_comp_price = min(competitor_prices)
                if our_price > min_comp_price:
                    # new_price = max(round(min_comp_price - 2, 2), 0.0)
                    new_price = max(int(min_comp_price - 2), 0)
                    corrected_prices.append(new_price)
                    # logger.info(f"üîª –¶–µ–Ω–∞ —Å–Ω–∏–∂–µ–Ω–∞: {our_price} ‚Üí {new_price}")
                else:
                    corrected_prices.append(our_price)
                    # logger.info(f"‚úÖ –¶–µ–Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞: {our_price}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {idx}: {e}")
            corrected_prices.append(None)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É
    df[corrected_price] = corrected_prices

    # logger.info(f"–¥–∞—Ç–∞—Ñ—Ä–µ–π–º –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ –º–∞–Ω–∏–ø—É–ª—è—É–∏—è–º–∏ {df[corrected_price]})")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    try:
        df.to_excel(output_file, index=False, engine='openpyxl')
        wb = load_workbook(output_file)
        ws = wb.active

        corr_col_idx = None
        orig_col_idx = None

        for col in range(1, ws.max_column + 1):
            header = ws.cell(row=1, column=col).value
            if header == corrected_price:
                corr_col_idx = col
            if header == input_price:
                orig_col_idx = col

        # logger.info(f"–°—Ç—Ä–æ–∫–∞ —Å –∏–Ω–¥–µ–∫–æ–º –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ {corr_col_idx}:–∑–Ω–∞—á–µ–Ω–∏–µ —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–π —Ü–µ–Ω–æ–π {corr_val_raw})")

        if corr_col_idx is None or orig_col_idx is None:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏")
            wb.save(output_file)
            return

        red_fill = PatternFill(start_color='FFC7CE', end_color='FFC7CE', fill_type='solid')  # —Å–Ω–∏–∂–µ–Ω–∞
        green_fill = PatternFill(start_color='C6EFCE', end_color='C6EFCE', fill_type='solid')  # –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

        for row_idx in range(2, ws.max_row + 1):
            try:
                orig_val_raw = ws.cell(row=row_idx, column=orig_col_idx).value
                corr_val_raw = ws.cell(row=row_idx, column=corr_col_idx).value

                logger.debug(f"–°—Ç—Ä–æ–∫–∞ —Å –∏–Ω–¥–µ–∫–æ–º {corr_col_idx}:–∑–Ω–∞—á–µ–Ω–∏–µ —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–π —Ü–µ–Ω–æ–π {corr_val_raw})")

                if orig_val_raw is None or corr_val_raw is None:
                    logger.debug(f"–°—Ç—Ä–æ–∫–∞ {row_idx}: –ø—Ä–æ–ø—É—â–µ–Ω–∞ –∏–∑-–∑–∞ None –∑–Ω–∞—á–µ–Ω–∏—è (orig: {orig_val_raw}, corr: {corr_val_raw})")
                    continue

                orig_val = parse_price(orig_val_raw)
                corr_val = corr_val_raw

                
                logger.debug(f"–°—Ç—Ä–æ–∫–∞ {row_idx}: –ø–æ—Å–ª–µ parse_price -> orig_val: {orig_val}, corr_val: {corr_val}")

                if orig_val is None or corr_val is None:
                    logger.debug(f"–°—Ç—Ä–æ–∫–∞ {row_idx}: –ø—Ä–æ–ø—É—â–µ–Ω–∞ –∏–∑-–∑–∞ None –ø–æ—Å–ª–µ parse_price")
                    continue

                if corr_val < orig_val:
                    ws.cell(row=row_idx, column=corr_col_idx).fill = red_fill
                    logger.debug(f"–°—Ç—Ä–æ–∫–∞ {row_idx}: corr_val < orig_val, –ø—Ä–∏–º–µ–Ω—ë–Ω –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç")
                else:
                    ws.cell(row=row_idx, column=corr_col_idx).fill = green_fill
                    logger.debug(f"–°—Ç—Ä–æ–∫–∞ {row_idx}: corr_val >= orig_val, –ø—Ä–∏–º–µ–Ω—ë–Ω –∑–µ–ª—ë–Ω—ã–π —Ü–≤–µ—Ç")

            except Exception as cell_e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ {row_idx}: {cell_e}")
                continue

        wb.save(output_file)
        logger.info(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–æ–π —Ü–µ–Ω –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º: {output_file}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ Excel —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º: {e}")





