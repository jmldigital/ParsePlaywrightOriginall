# price_adjuster.py
from openpyxl.styles import PatternFill
from openpyxl.utils.dataframe import dataframe_to_rows
from openpyxl import load_workbook
import pandas as pd
from config import corrected_price, competitor1, competitor2, competitor1_delivery, competitor2_delivery, input_price,INPUT_COL_ARTICLE,INPUT_COL_BRAND       
        
from utils import logger
import re

def parse_delivery_days(delivery_str):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ 'X –¥–Ω–µ–π' –≤ int –∏–ª–∏ None"""
    if not delivery_str or not isinstance(delivery_str, str):
        return None
    m = re.search(r'(\d+)', delivery_str)
    if m:
        return int(m.group(1))
    return None





def adjust_prices_and_save(df, output_file):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç DataFrame —Å —Ü–≤–µ—Ç–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    –ü–æ–¥—Ä–æ–±–Ω–æ –ª–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.
    """

    corrected_prices = []

    def parse_price(value):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ü–µ–Ω—É –≤ float (–∑–∞–º–µ–Ω—è—è –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É, —É–±–∏—Ä–∞—è –ø—Ä–æ–±–µ–ª—ã)."""
        if pd.isna(value):
            return None
        try:
            val_str = str(value).strip().replace(" ", "").replace(",", ".")
            return float(val_str)
        except Exception:
            return None

    for idx, row in df.iterrows():
        # logger.info("------------------------------------------------------------")
        # logger.info(f"‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ {idx + 1}/{len(df)}")

        try:
            # –ù–∞—à–∞ —Ü–µ–Ω–∞
            raw_price = row.get(input_price)
            

            our_price = parse_price(raw_price)
            if our_price is None:
                # logger.warning(f"‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ü–µ–Ω—É: {raw_price}")
                corrected_prices.append(None)
                continue

            # logger.info(f"‚úÖ our_price (float): {our_price}")

            # –¶–µ–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π 1‚Äì4 –¥–Ω—è)
            competitor_prices = []

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º competitor1
            comp1_price = parse_price(row.get(competitor1))
            comp1_delivery = row.get(competitor1_delivery)
            # logger.info(f"competitor1_price: {comp1_price}, delivery: {comp1_delivery}")

            if comp1_price is not None and pd.notna(comp1_delivery):
                delivery_days = parse_delivery_days(comp1_delivery)
                if delivery_days is not None and 1 <= delivery_days <= 4:
                    competitor_prices.append(comp1_price)
                    # logger.info(f"‚úÖ competitor1 –¥–æ–±–∞–≤–ª–µ–Ω ({comp1_price} –∑–∞ {delivery_days} –¥–Ω.)")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º competitor2
            comp2_price = parse_price(row.get(competitor2))
            comp2_delivery = row.get(competitor2_delivery)
            # logger.info(f"competitor2_price: {comp2_price}, delivery: {comp2_delivery}")

            if comp2_price is not None and pd.notna(comp2_delivery):
                delivery_days = parse_delivery_days(comp2_delivery)
                if delivery_days is not None and 1 <= delivery_days <= 4:
                    competitor_prices.append(comp2_price)
                    # logger.info(f"‚úÖ competitor2 –¥–æ–±–∞–≤–ª–µ–Ω ({comp2_price} –∑–∞ {delivery_days} –¥–Ω.)")

            # –õ–æ–≥–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
            if not competitor_prices:
                corrected_prices.append(our_price)
                # logger.info("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤, —Ü–µ–Ω–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
            else:
                min_comp_price = min(competitor_prices)
                if our_price > min_comp_price:
                    new_price = max(round(min_comp_price - 2, 2), 0.0)
                    corrected_prices.append(new_price)
                    # logger.info(f"üîª –¶–µ–Ω–∞ —Å–Ω–∏–∂–µ–Ω–∞: {our_price} ‚Üí {new_price}")
                else:
                    corrected_prices.append(our_price)
                    # logger.info(f"‚úÖ –¶–µ–Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞: {our_price}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {idx}: {e}")
            corrected_prices.append(None)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É
    df[corrected_price] = corrected_prices

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    try:
        df.to_excel(output_file, index=False, engine='openpyxl')
        wb = load_workbook(output_file)
        ws = wb.active

        corr_col_idx = None
        orig_col_idx = None

        for col in range(1, ws.max_column + 1):
            header = ws.cell(row=1, column=col).value
            if header == corrected_price:
                corr_col_idx = col
            if header == input_price:
                orig_col_idx = col

        if not corr_col_idx or not orig_col_idx:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏")
            wb.save(output_file)
            return

        red_fill = PatternFill(start_color='FFC7CE', end_color='FFC7CE', fill_type='solid')  # —Å–Ω–∏–∂–µ–Ω–∞
        green_fill = PatternFill(start_color='C6EFCE', end_color='C6EFCE', fill_type='solid')  # –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

        for row_idx in range(2, ws.max_row + 1):
            try:
                orig_val = ws.cell(row=row_idx, column=orig_col_idx).value
                corr_val = ws.cell(row=row_idx, column=corr_col_idx).value

                if orig_val is None or corr_val is None:
                    continue

                orig_val = parse_price(orig_val)
                corr_val = parse_price(corr_val)

                if orig_val is None or corr_val is None:
                    continue

                if corr_val < orig_val:
                    ws.cell(row=row_idx, column=corr_col_idx).fill = red_fill
                else:
                    ws.cell(row=row_idx, column=corr_col_idx).fill = green_fill

            except Exception as cell_e:
                logger.debug(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ {row_idx}: {cell_e}")
                continue

        wb.save(output_file)
        logger.info(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–æ–π —Ü–µ–Ω –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º: {output_file}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ Excel —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º: {e}")





# def parse_delivery_days(delivery_str):
#     """–ü–∞—Ä—Å–∏—Ç —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ 'X –¥–Ω–µ–π' –≤ int –∏–ª–∏ None"""
#     if not delivery_str or not isinstance(delivery_str, str):
#         return None
#     m = re.search(r'(\d+)', delivery_str)
#     if m:
#         return int(m.group(1))
#     return None


# def adjust_prices_and_save(df, output_file):
#     """
#     –î–æ–±–∞–≤–ª—è–µ—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç DataFrame —Å —Ü–≤–µ—Ç–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
#     –° –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
#     """
#     logger.info("=" * 60)
#     logger.info("üîß –ù–ê–ß–ê–õ–û –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ò –¶–ï–ù")
#     logger.info(f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(df)}")
#     logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {list(df.columns)}")

#     # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
#     missing_cols = []
#     for col in [input_price, competitor1, competitor2, competitor1_delivery, competitor2_delivery]:
#         if col not in df.columns:
#             missing_cols.append(col)
#             logger.error(f"‚ùå –°—Ç–æ–ª–±–µ—Ü '{col}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ DataFrame!")

#     if missing_cols:
#         logger.error(f"–ü—Ä–µ—Ä—ã–≤–∞—é –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–æ–ª–±—Ü—ã: {missing_cols}")
#         # –í—Å—ë —Ä–∞–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –Ω–æ corrected_price = None
#         df[corrected_price] = None
#         df.to_excel(output_file, index=False, engine='openpyxl')
#         return df

#     logger.info(f"‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã –Ω–∞–π–¥–µ–Ω—ã")
#     logger.info(f"üìå –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ö–æ–¥–Ω—É—é —Ü–µ–Ω—É: '{input_price}'")
#     logger.info(f"üìå –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç 1: {competitor1} + {competitor1_delivery}")
#     logger.info(f"üìå –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç 2: {competitor2} + {competitor2_delivery}")

#     corrected_prices = []
#     any_competitor_found = False  # —Ñ–ª–∞–≥: –±—ã–ª–∏ –ª–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1‚Äì4 –¥–Ω—è

#     # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
#     for idx, row in df.iterrows():
#         try:
#             # === –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ ===
#             brand = row.get('–ë—Ä–µ–Ω–¥', row.get('brand', row.get(INPUT_COL_BRAND, 'Unknown')))
#             article = row.get('–ê—Ä—Ç–∏–∫—É–ª', row.get('article', row.get(INPUT_COL_ARTICLE, 'Unknown')))
#             logger.debug(f"--- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ {idx}: {brand} / {article}")

#             # === 1. –ù–∞—à–∞ —Ü–µ–Ω–∞ ===
#             our_price_raw = row[INPUT_COL_PRICE]
#             logger.debug(f"  ‚Üí –ù–∞—à–∞ —Ü–µ–Ω–∞ (—Å—ã—Ä–∞—è): {our_price_raw}")

#             if pd.isna(our_price_raw):
#                 logger.debug(f"  ‚ö†Ô∏è –ù–∞—à–∞ —Ü–µ–Ω–∞ ‚Äî NaN ‚Üí corrected_price = None")
#                 corrected_prices.append(None)
#                 continue

#             try:
#                 our_price = float(our_price_raw)
#                 logger.debug(f"  ‚Üí –ù–∞—à–∞ —Ü–µ–Ω–∞ (—á–∏—Å–ª–æ): {our_price:.2f} ‚ÇΩ")
#             except (ValueError, TypeError) as e:
#                 logger.debug(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å '{our_price_raw}' –≤ —á–∏—Å–ª–æ: {e}")
#                 corrected_prices.append(None)
#                 continue

#             # === 2. –¶–µ–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π 1‚Äì4 –¥–Ω—è) ===
#             competitor_prices = []

#             # –ü—Ä–æ–≤–µ—Ä—è–µ–º competitor1
#             comp1_price_raw = row.get(competitor1)
#             comp1_delivery_raw = row.get(competitor1_delivery)
#             logger.debug(f"  ‚Üí {competitor1}: —Ü–µ–Ω–∞={comp1_price_raw}, –¥–æ—Å—Ç–∞–≤–∫–∞={comp1_delivery_raw}")

#             if pd.notna(comp1_price_raw) and pd.notna(comp1_delivery_raw):
#                 try:
#                     comp1_price = float(comp1_price_raw)
#                     comp1_days = parse_delivery_days(comp1_delivery_raw)
#                     logger.debug(f"  ‚Üí {competitor1} ‚Äî —Ä–∞—Å–ø–∞—Ä—à–µ–Ω–Ω—ã–µ –¥–Ω–∏: {comp1_days}")

#                     if comp1_days is not None and 1 <= comp1_days <= 4:
#                         competitor_prices.append(comp1_price)
#                         logger.debug(f"  ‚úÖ {competitor1} –¥–æ–±–∞–≤–ª–µ–Ω: {comp1_price:.2f} ‚ÇΩ (–¥–æ—Å—Ç–∞–≤–∫–∞ {comp1_days} –¥–Ω)")
#                         any_competitor_found = True
#                     else:
#                         logger.debug(f"  ‚ö†Ô∏è {competitor1} ‚Äî –¥–æ—Å—Ç–∞–≤–∫–∞ –≤–Ω–µ 1‚Äì4 –¥–Ω–µ–π ‚Üí –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
#                 except Exception as e:
#                     logger.debug(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {competitor1}: {e}")

#             # –ü—Ä–æ–≤–µ—Ä—è–µ–º competitor2
#             comp2_price_raw = row.get(competitor2)
#             comp2_delivery_raw = row.get(competitor2_delivery)
#             logger.debug(f"  ‚Üí {competitor2}: —Ü–µ–Ω–∞={comp2_price_raw}, –¥–æ—Å—Ç–∞–≤–∫–∞={comp2_delivery_raw}")

#             if pd.notna(comp2_price_raw) and pd.notna(comp2_delivery_raw):
#                 try:
#                     comp2_price = float(comp2_price_raw)
#                     comp2_days = parse_delivery_days(comp2_delivery_raw)
#                     logger.debug(f"  ‚Üí {competitor2} ‚Äî —Ä–∞—Å–ø–∞—Ä—à–µ–Ω—ã –¥–Ω–∏: {comp2_days}")

#                     if comp2_days is not None and 1 <= comp2_days <= 4:
#                         competitor_prices.append(comp2_price)
#                         logger.debug(f"  ‚úÖ {competitor2} –¥–æ–±–∞–≤–ª–µ–Ω: {comp2_price:.2f} ‚ÇΩ (–¥–æ—Å—Ç–∞–≤–∫–∞ {comp2_days} –¥–Ω)")
#                         any_competitor_found = True
#                     else:
#                         logger.debug(f"  ‚ö†Ô∏è {competitor2} ‚Äî –¥–æ—Å—Ç–∞–≤–∫–∞ –≤–Ω–µ 1‚Äì4 –¥–Ω–µ–π ‚Üí –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
#                 except Exception as e:
#                     logger.debug(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {competitor2}: {e}")

#             # === 3. –õ–æ–≥–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ ===
#             logger.debug(f"  ‚Üí –¶–µ–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ (1‚Äì4 –¥–Ω—è): {competitor_prices}")

#             if not competitor_prices:
#                 logger.debug(f"  ‚Üí –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ü–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ ‚Üí –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—à—É: {our_price:.2f}")
#                 corrected_prices.append(our_price)
#             else:
#                 min_comp_price = min(competitor_prices)
#                 logger.debug(f"  ‚Üí –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞: {min_comp_price:.2f}")

#                 if our_price > min_comp_price:
#                     new_price = max(round(min_comp_price - 2, 2), 0.0)
#                     logger.debug(f"  ‚úÖ –ù–∞—à–∞ —Ü–µ–Ω–∞ –≤—ã—à–µ ‚Üí —Å–Ω–∏–∂–∞–µ–º –¥–æ: {new_price:.2f}")
#                     corrected_prices.append(new_price)
#                 else:
#                     logger.debug(f"  ‚Üí –ù–∞—à–∞ —Ü–µ–Ω–∞ –Ω–∏–∂–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ ‚Üí –æ—Å—Ç–∞–≤–ª—è–µ–º: {our_price:.2f}")
#                     corrected_prices.append(our_price)

#         except Exception as e:
#             logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {idx}: {e}")
#             corrected_prices.append(None)

#     # === –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
#     logger.info(f"üîß –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
#     logger.info(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {len(corrected_prices)}")
#     logger.info(f"   –ó–∞–ø–æ–ª–Ω–µ–Ω–æ —Ü–µ–Ω: {len([p for p in corrected_prices if p is not None])}")
#     logger.info(f"   –ü–µ—Ä–≤—ã–µ 10 —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω: {corrected_prices[:10]}")

#     if any_competitor_found:
#         logger.info("‚úÖ –•–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π 1‚Äì4 –¥–Ω—è –Ω–∞–π–¥–µ–Ω")
#     else:
#         logger.warning("‚ö†Ô∏è –ù–ò –û–î–ò–ù –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç –Ω–µ –ø–æ–ø–∞–ª –≤ –¥–∏–∞–ø–∞–∑–æ–Ω 1‚Äì4 –¥–Ω—è ‚Äî –≤—Å–µ —Ü–µ–Ω—ã –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –µ—Å—Ç—å")

#     # === –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –≤ DataFrame ===
#     df[corrected_price] = corrected_prices

#     # === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º ===
#     try:
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
#         df.to_excel(output_file, index=False, engine='openpyxl')
#         logger.info(f"üíæ Excel —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_file}")

#         # –ó–∞–≥—Ä—É–∂–∞–µ–º workbook –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
#         wb = load_workbook(output_file)
#         ws = wb.active

#         # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫
#         corr_col_idx = None
#         orig_col_idx = None

#         for col in range(1, ws.max_column + 1):
#             header = ws.cell(row=1, column=col).value
#             if header == corrected_price:
#                 corr_col_idx = col
#             if header == INPUT_COL_PRICE:
#                 orig_col_idx = col

#         if not corr_col_idx:
#             logger.warning(f"‚ùå –ö–æ–ª–æ–Ω–∫–∞ '{corrected_price}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Excel ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
#             wb.save(output_file)
#             return df

#         if not orig_col_idx:
#             logger.warning(f"‚ùå –ö–æ–ª–æ–Ω–∫–∞ '{INPUT_COL_PRICE}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é —Ü–≤–µ—Ç–∞")
#             wb.save(output_file)
#             return df

#         # –¶–≤–µ—Ç–∞
#         red_fill = PatternFill(start_color='FFC7CE', end_color='FFC7CE', fill_type='solid')  # —Å–Ω–∏–∂–µ–Ω–∞
#         green_fill = PatternFill(start_color='C6EFCE', end_color='C6EFCE', fill_type='solid')  # –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

#         # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞
#         for row_idx in range(2, ws.max_row + 1):
#             try:
#                 orig_val = ws.cell(row=row_idx, column=orig_col_idx).value
#                 corr_val = ws.cell(row=row_idx, column=corr_col_idx).value

#                 if pd.isna(orig_val) or pd.isna(corr_val):
#                     continue

#                 try:
#                     orig_val = float(orig_val)
#                     corr_val = float(corr_val)
#                 except (ValueError, TypeError):
#                     continue

#                 cell = ws.cell(row=row_idx, column=corr_col_idx)
#                 if corr_val < orig_val:
#                     cell.fill = red_fill
#                     logger.debug(f"  ‚Üí –°—Ç—Ä–æ–∫–∞ {row_idx}: —Ü–µ–Ω–∞ —Å–Ω–∏–∂–µ–Ω–∞ ‚Üí –ö–†–ê–°–ù–´–ô")
#                 else:
#                     cell.fill = green_fill
#                     logger.debug(f"  ‚Üí –°—Ç—Ä–æ–∫–∞ {row_idx}: —Ü–µ–Ω–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Üí –ó–ï–õ–Å–ù–´–ô")

#             except Exception as e:
#                 logger.debug(f"  ‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ {row_idx}: {e}")
#                 continue

#         wb.save(output_file)
#         logger.info(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–æ–π —Ü–µ–Ω –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º: {output_file}")

#     except Exception as e:
#         logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ Excel: {e}")

#     return df