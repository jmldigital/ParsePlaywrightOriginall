# main.py
"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å Playwright.
- –û–±—â–∏–µ –∫—É–∫–∏ –¥–ª—è avtoformula
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π re-login –ø—Ä–∏ —Ä–∞–∑–ª–æ–≥–∏–Ω–µ
- –†–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –ª–æ–≥–∏ –ø–æ —Å–∞–π—Ç–∞–º
"""
from telegram import Bot
import asyncio
import time
import pandas as pd
import json
import math
import random
from pathlib import Path
from tqdm.asyncio import tqdm
import logging
from dotenv import load_dotenv
load_dotenv()

from playwright.async_api import async_playwright, Browser, BrowserContext
from config import (
    INPUT_FILE, OUTPUT_FILE, TEMP_FILE, MAX_ROWS, SAVE_INTERVAL,
    competitor1, competitor1_delivery, competitor2, competitor2_delivery,
    MAX_WORKERS, COOKIE_FILE,
    INPUT_COL_ARTICLE, INPUT_COL_BRAND,  
    AVTO_LOGIN, AVTO_PASSWORD, BOT_TOKEN, ADMIN_CHAT_ID, SEND_TO_TELEGRAM,ENABLE_AVTOFORMULA
)
from utils import logger, preprocess_dataframe
from state_manager import load_state, save_state
from price_adjuster import adjust_prices_and_save
import requests

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Å–∫—Ä–∞–ø–ø–µ—Ä—ã
from scraper_avtoformula import scrape_avtoformula_pw
from scraper_stparts import scrape_stparts_async
from auth import ensure_logged_in


import sys



COOKIE_PATH = Path(COOKIE_FILE)
LOG_DIR = Path("logs")
LOG_DIR.mkdir(exist_ok=True)

# === –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤ ===
from utils import get_site_logger

logger_avto = get_site_logger("avtoformula")
logger_st = get_site_logger("stparts")



def setup_event_loop_policy():
    if sys.platform.startswith('win'):
        if hasattr(asyncio, 'WindowsProactorEventLoopPolicy'):
            asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
            print("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ WindowsProactorEventLoopPolicy –¥–ª—è Windows")
    else:
        print("–ù–µ Windows ‚Äî –ø–æ–ª–∏—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è")




# === Telegram ===
def send_telegram_error(msg):
    if not SEND_TO_TELEGRAM:
        return
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        requests.post(url, data={'chat_id': ADMIN_CHAT_ID, 'text': f"‚ùå Parser Error:\n{msg}"})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram: {e}")


async def send_telegram_file(file_path, caption=None):
    if not SEND_TO_TELEGRAM:
        return
    try:
        bot = Bot(token=BOT_TOKEN)
        async with bot:
            with open(file_path, 'rb') as f:  # ‚Üê —Ç–µ–ø–µ—Ä—å —Ñ–∞–π–ª –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è
                await bot.send_document(
                    chat_id=ADMIN_CHAT_ID,
                    document=f,
                    caption=caption
                )
        logger.info("–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")


# === –ü—É–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ ===
class ContextPool:
    def __init__(self, browser: Browser, pool_size: int = 5):
        self.browser = browser
        self.pool_size = pool_size
        self.contexts = []
        self.semaphore = asyncio.Semaphore(pool_size)
        self.initialized = False
        self.cookies = None  # –æ–±—â–∏–µ –∫—É–∫–∏


    async def initialize(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ —Å –æ–±—â–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π. –°—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á."""
        logger.info("üîß –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ Avtoformula –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É–∫...")

        # –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ª–æ–≥–∏–Ω–∞
        temp_context = await self.browser.new_context()
        temp_page = await temp_context.new_page()

        try:
            if not await ensure_logged_in(temp_page, AVTO_LOGIN, AVTO_PASSWORD):
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ Avtoformula")
                raise RuntimeError("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–∫—É–∫–∏ + localStorage –∏ —Ç.–¥.)
            await temp_context.storage_state(path=COOKIE_PATH)
            logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ storage_state.json")

        finally:
            await temp_context.close()

        # –°–æ–∑–¥–∞—ë–º –ø—É–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤, –∑–∞–≥—Ä—É–∂–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        logger.info(f"–°–æ–∑–¥–∞—ë–º {self.pool_size} –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ —Å –æ–±—â–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π...")
        self.contexts = []  # –æ—á–∏—â–∞–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

        for i in range(self.pool_size):
            ctx = await self.browser.new_context(
                storage_state=COOKIE_PATH,  # ‚Üê –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                viewport={'width': 1920, 'height': 1080},
                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
            )
            self.contexts.append(ctx)
            logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç {i + 1}/{self.pool_size} —Å–æ–∑–¥–∞–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")

        self.initialized = True

    async def refresh_cookies(self):
        """–ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤"""
        logger.warning("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–∞–∑–ª–æ–≥–∏–Ω ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
        temp_context = await self.browser.new_context()
        temp_page = await temp_context.new_page()

        try:
            if await ensure_logged_in(temp_page, AVTO_LOGIN, AVTO_PASSWORD):
                # –ü–æ–ª—É—á–∞–µ–º –∫—É–∫–∏
                cookies = await temp_context.cookies()
                await temp_context.storage_state(path=COOKIE_PATH)
                logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –∫—É–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–∫–∏ –≤–æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö
                for ctx in self.contexts:
                    await ctx.add_cookies(cookies)
                logger.info(f"‚úÖ –ö—É–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {len(self.contexts)} –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤")
            else:
                logger.error("‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É–∫: {e}")
        finally:
            await temp_context.close()
    
    async def get_context(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø—É–ª–∞ (–±–µ–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)"""
        await self.semaphore.acquire()
        if not self.contexts:
            raise RuntimeError("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤")
        return self.contexts.pop()  # ‚Üê –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç

    def release_context(self, ctx):
        """–í–µ—Ä–Ω—É—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –ø—É–ª"""
        self.contexts.append(ctx)
        self.semaphore.release()

    async def close_all(self):
        for ctx in self.contexts:
            await ctx.close()
        self.contexts.clear()
        logger.info("üõë –í—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã")



async def process_row_async(pool: ContextPool, idx: int, brand: str, part: str):
    context = None
    page_st = None
    page_avto = None
    result_st = None
    result_avto = None

    for attempt in range(2):  # –º–∞–∫—Å–∏–º—É–º 2 –ø–æ–ø—ã—Ç–∫–∏
        try:
            context = await pool.get_context()
            page_st = await context.new_page()
            page_avto = await context.new_page()

            if ENABLE_AVTOFORMULA:
                result_st, result_avto = await asyncio.gather(
                    scrape_stparts_async(page_st, brand, part, logger_st),
                    scrape_avtoformula_pw(page_avto, brand, part, logger_avto),
                    return_exceptions=True
                )
            else:
                result_st = await scrape_stparts_async(page_st, brand, part, logger_st)
                result_avto = (None, None)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ avtoformula —É–ø–∞–ª –∏–∑-–∑–∞ —Ä–∞–∑–ª–æ–≥–∏–Ω–∞
            if isinstance(result_avto, Exception) and "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å" in str(result_avto).lower():
                logger.warning(f"üîÅ –†–∞–∑–ª–æ–≥–∏–Ω –æ–±–Ω–∞—Ä—É–∂–µ–Ω –¥–ª—è {brand}/{part}. –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–∫–∏...")
                await pool.refresh_cookies()
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                await page_st.close()
                await page_avto.close()
                pool.release_context(context)
                context = page_st = page_avto = None
                continue  # –ø–æ–≤—Ç–æ—Ä–∏–º –ø–æ–ø—ã—Ç–∫—É
            else:
                break  # –≤—Å—ë –æ–∫, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ [{idx}] {brand}/{part}: {e}")
            send_telegram_error(f"{brand}/{part}: {e}")
            break  # –≤—ã—Ö–æ–¥–∏–º –ø—Ä–∏ —Ñ–∞—Ç–∞–ª—å–Ω–æ–π –æ—à–∏–±–∫–µ
        finally:
            if page_st:
                await page_st.close()
            if page_avto:
                await page_avto.close()
            if context:
                pool.release_context(context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if isinstance(result_st, Exception):
        price_st, delivery_st = None, None
    else:
        price_st, delivery_st = result_st

    if isinstance(result_avto, Exception):
        price_avto, delivery_avto = None, None
    else:
        price_avto, delivery_avto = result_avto

    return idx, {
        competitor1: price_st,
        competitor1_delivery: delivery_st,
        competitor2: price_avto,
        competitor2_delivery: delivery_avto
    }

# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
async def main_async():
    logger.info("=" * 60)
    logger.info("üöÄ –ó–ê–ü–£–°–ö PLAYWRIGHT –ü–ê–†–°–ï–†–ê")
    logger.info("=" * 60)

    df = pd.read_excel(INPUT_FILE)
    
    # logger.info(f" –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –ø–µ—Ä–µ–¥ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å–æ–º {df}")  

    df = preprocess_dataframe(df)
    for col in [competitor1, competitor1_delivery, competitor2, competitor2_delivery]:
        if col not in df.columns:
            df[col] = None

    # logger.info(f" –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –ø–æ—Å–ª–µ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∞ {df}")   

    tasks = [
        (idx, str(row[INPUT_COL_BRAND]).strip(), str(row[INPUT_COL_ARTICLE]).strip())
        for idx, row in df.head(MAX_ROWS).iterrows()
        if str(row[INPUT_COL_ARTICLE]).strip()
    ]

    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True, args=["--no-sandbox", "--disable-dev-shm-usage"])
        pool = ContextPool(browser, pool_size=MAX_WORKERS)
        await pool.initialize()

        results = []
        with tqdm(total=len(tasks), desc="–ü–∞—Ä—Å–∏–Ω–≥") as pbar:
            for coro in asyncio.as_completed([process_row_async(pool, *t) for t in tasks]):
                idx, result = await coro
                if result:
                    for col, val in result.items():
                        df.at[idx, col] = val
                pbar.update(1)
                results.append((idx, result))

        await asyncio.to_thread(adjust_prices_and_save, df, OUTPUT_FILE)
        await send_telegram_file(OUTPUT_FILE)
        await pool.close_all()
        await browser.close()
        logger.info("üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ")


def main():
    setup_event_loop_policy()
    asyncio.run(main_async())


if __name__ == "__main__":
    main()
    