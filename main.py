# main.py
import time
import pandas as pd
import json
from pathlib import Path
from concurrent.futures import ThreadPoolExecutor, as_completed
from tqdm import tqdm
import random
import logging
from dotenv import load_dotenv
load_dotenv()  # ‚Üê –î–û –∏–º–ø–æ—Ä—Ç–∞ config.py
import atexit
import json
import asyncio  # ‚Üê –Ω—É–∂–µ–Ω –¥–ª—è asyncio.run()
import platform
import math
from pathlib import Path
from config import (
    INPUT_FILE, OUTPUT_FILE, TEMP_FILE, MAX_ROWS, SAVE_INTERVAL,
    competitor1, competitor1_delivery, competitor2, competitor2_delivery,
    MAX_WORKERS,COOKIE_FILE,
    INPUT_COL_ARTICLE, INPUT_COL_BRAND,  
    AVTO_LOGIN, AVTO_PASSWORD, BOT_TOKEN, ADMIN_CHAT_ID, SEND_TO_TELEGRAM
)
from utils import logger, preprocess_dataframe
from state_manager import load_state, save_state
from cache_manager import load_cache, save_cache, get_cache_key
from auth import load_cookies, is_logged_in,save_cookies,ensure_logged_in
from scraper_stparts import scrape_stparts
from scraper_avtoformula import scrape_avtoformula
from price_adjuster import adjust_prices_and_save
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import asyncio
import requests
import threading



from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
import os
import stat


# –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥—Ä–∞–π–≤–µ—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–∫–∞
thread_local = threading.local()
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ‚Äî –ø—É—Ç—å –∫ chromedriver
CHROMEDRIVER_PATH = None

COOKIE_FILES = Path(COOKIE_FILE)

# def get_driver():
#     """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥—Ä–∞–π–≤–µ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞. –°–æ–∑–¥–∞—ë—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç."""
#     if not hasattr(thread_local, "driver"):
#         logger.info(f"üßµ –°–æ–∑–¥–∞—ë–º –¥—Ä–∞–π–≤–µ—Ä –¥–ª—è –ø–æ—Ç–æ–∫–∞ {threading.current_thread().name}")
#         driver = setup_driver()
#         thread_local.driver = driver
#         thread_local.logged_in = False  # —Ñ–ª–∞–≥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
#     else:
#         driver = thread_local.driver

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ª–æ–≥–∏–Ω–µ–Ω—ã –ª–∏ –º—ã
#     if not thread_local.logged_in:
#         if not load_cookies(driver) or not is_logged_in(driver):
#             logger.info("üîê –ö—É–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ ‚Äî –¥–µ–ª–∞–µ–º —Ä—É—á–Ω–æ–π –ª–æ–≥–∏–Ω")
#             if login_manually(driver, AVTO_LOGIN, AVTO_PASSWORD):
#                 save_cookies(driver)
#                 thread_local.logged_in = True
#             else:
#                 logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è")
#                 return None
#         else:
#             logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ –∫—É–∫–∞–º")
#             thread_local.logged_in = True

#     return driver


def get_driver():
    if not hasattr(thread_local, "driver"):
        logger.info(f"üßµ –°–æ–∑–¥–∞—ë–º –¥—Ä–∞–π–≤–µ—Ä –¥–ª—è –ø–æ—Ç–æ–∫–∞ {threading.current_thread().name}")
        driver = setup_driver()
        thread_local.driver = driver
        thread_local.logged_in = False
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –ø–æ—Ç–æ–∫–∞
        atexit.register(quit_driver)
    driver = thread_local.driver
    if not getattr(thread_local, "logged_in", False):
        if ensure_logged_in(driver, AVTO_LOGIN, AVTO_PASSWORD):
            thread_local.logged_in = True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä")
            return None
    return driver


def quit_driver():
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –¥—Ä–∞–π–≤–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞"""
    if hasattr(thread_local, "driver"):
        logger.info(f"üõë –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä –ø–æ—Ç–æ–∫–∞ {threading.current_thread().name}")
        thread_local.driver.quit()
        delattr(thread_local, "driver")
        thread_local.logged_in = False





# —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
def setup_driver():
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ WebDriver ‚Äî –¥–ª—è Windows –∏ Linux"""
    from selenium.webdriver.chrome.service import Service
    from config import PAGE_LOAD_TIMEOUT
    import logging

    options = webdriver.ChromeOptions()
    options.add_argument("--headless=new")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-gpu")
    options.add_argument("--window-size=1920,1080")
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option('useAutomationExtension', False)
    options.add_argument(
        "user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
        "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36"
    )

    global CHROMEDRIVER_PATH

    if CHROMEDRIVER_PATH is None:
        raise RuntimeError("‚ùå CHROMEDRIVER_PATH –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    try:
        service = Service(CHROMEDRIVER_PATH)
        driver = webdriver.Chrome(service=service, options=options)
        driver.set_page_load_timeout(PAGE_LOAD_TIMEOUT)
        logger.info(f"‚úÖ WebDriver —Å–æ–∑–¥–∞–Ω: {CHROMEDRIVER_PATH}")
        return driver
    except Exception as e:
        logger.critical(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebDriver: {e}", exc_info=True)
        send_telegram_error(f"üí• –û—à–∏–±–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
        raise







def send_telegram_error(msg):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –æ—à–∏–±–∫–∏ –≤ Telegram"""
    token = BOT_TOKEN
    chat_id = ADMIN_CHAT_ID
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    payload = {
        'chat_id': chat_id,
        'text': f"‚ùå Parser Error:\n{msg}",
        'parse_mode': 'html'
    }
    try:
        requests.post(url, data=payload, timeout=10)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–∫–∏ –≤ Telegram: {e}")


def send_telegram_process(msg):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –æ—à–∏–±–∫–∏ –≤ Telegram"""
    token = BOT_TOKEN
    chat_id = ADMIN_CHAT_ID
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    payload = {
        'chat_id': chat_id,
        'text': f"üïê –ü—Ä–æ–≥—Ä–µ—Å—Å:\n{msg}",
        'parse_mode': 'html'
    }
    try:
        requests.post(url, data=payload, timeout=10)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–∫–∏ –≤ Telegram: {e}")




def process_row(args):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É: (idx, brand, part)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (idx, result_dict)
    """
    idx, brand, part = args  # cache –±–æ–ª—å—à–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º

    try:
        driver = get_driver()
        if driver is None:
            return idx, None

        logger.info(f"‚Üí –ü–∞—Ä—Å–∏–Ω–≥ stparts: {brand}/{part}")
        price_st, delivery_st = scrape_stparts(driver, brand, part)

        logger.info(f"‚Üí –ü–∞—Ä—Å–∏–Ω–≥ avtoformula: {brand}/{part}")
        price_avto, delivery_avto = scrape_avtoformula(driver, brand, part)

        result = {
            competitor1: round(price_st, 2) if price_st is not None else None,
            competitor1_delivery: delivery_st,
            competitor2: round(price_avto, 2) if price_avto is not None else None,
            competitor2_delivery: delivery_avto
        }

        time.sleep(random.uniform(1.0, 2.5))
        return idx, result

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ {brand}/{part}: {e}")
        send_telegram_error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ {brand}/{part}: {e}")
        return idx, None


# === Telegram –æ—Ç–ø—Ä–∞–≤–∫–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞) ===
async def send_telegram_file(file_path, caption=None):
    from telegram import Bot
    try:
        bot = Bot(token=BOT_TOKEN)
        file_size = Path(file_path).stat().st_size / 1024
        default_caption = (
            f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üìÑ {Path(file_path).name}\n"
            f"üìä –†–∞–∑–º–µ—Ä: {file_size:.2f} KB"
        )
        with open(file_path, 'rb') as f:
            await bot.send_document(
                chat_id=ADMIN_CHAT_ID,
                document=f,
                caption=caption or default_caption,
                filename=Path(file_path).name
            )
        logger.info("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        send_telegram_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False


def main():
    global CHROMEDRIVER_PATH  # ‚Üê –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
    logger.info("=" * 60)
    logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–ê–†–°–ï–†–ê (–ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ô + STATE + CACHE)")
    logger.info("=" * 60)

 # üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º –û–°
    current_os = platform.system()
    logger.info(f"üñ•Ô∏è  –û–°: {current_os} ({platform.platform()})")

    
    # üåê –¢–æ–ª—å–∫–æ –Ω–∞ Windows ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—á–Ω–æ–π chromedriver
    if current_os == "Windows":
        logger.info("üü¢ Windows ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º chromedriver –∏–∑ D:/chromedriver-win64")

        CHROMEDRIVER_PATH = r"D:\chromedriver-win64\chromedriver.exe"

        if not Path(CHROMEDRIVER_PATH).exists():
            logger.critical(f"‚ùå –§–∞–π–ª chromedriver –Ω–µ –Ω–∞–π–¥–µ–Ω: {CHROMEDRIVER_PATH}")
            send_telegram_error("üí• chromedriver –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ D:/chromedriver-win64")
            return

  
    else:
        # Linux / Docker: –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ chromedriver —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        logger.info("üü¢ OS: Linux/Docker ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π chromedriver")
        # –ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ chromedriver –≤ PATH
        import shutil
        chromedriver_path = shutil.which('chromedriver')
        if chromedriver_path:
            CHROMEDRIVER_PATH = chromedriver_path
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π chromedriver: {CHROMEDRIVER_PATH}")
        else:
            logger.critical("‚ùå chromedriver –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH (Linux/Docker)")
            send_telegram_error("üí• –û—à–∏–±–∫–∞: chromedriver –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
            return

    if not Path(INPUT_FILE).exists():
        logger.error(f"‚ùå –§–∞–π–ª {INPUT_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    try:
        df = pd.read_excel(INPUT_FILE)
        # üî• –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤: –ª—é–±—ã–µ —á–∏—Å–ª–∞ ‚Üí —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ .0
        df.columns = df.columns.astype(str).str.replace('.0', '', regex=False).str.strip()
        logger.info(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫")
        df = preprocess_dataframe(df)
    except Exception as e:
        send_telegram_error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    for col in [competitor1, competitor1_delivery, competitor2, competitor2_delivery]:
        if col not in df.columns:
            df[col] = None

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∫—ç—à
    state = load_state()
    # cache = load_cache()

    cache = {}

    last_index = state['last_index']
    processed_count = state['processed_count']

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–¥–∞—á
    rows_to_process = df.head(MAX_ROWS).copy()
    tasks = []
    skipped = 0




    for idx, row in rows_to_process.iterrows():
        if idx <= last_index:
            skipped += 1
            continue
        # part = str(row[1]).strip()
        # brand = str(row[3]).strip()

        part = str(row[INPUT_COL_ARTICLE]).strip()
        brand = str(row[INPUT_COL_BRAND]).strip()
        if (
            pd.isna(row[INPUT_COL_ARTICLE])
            or pd.isna(row[INPUT_COL_BRAND])
            or not part
            or not brand
            or part == 'nan'
        ):
            continue

        tasks.append((idx, brand, part))

    logger.info(f"‚úÖ –ü—Ä–æ–ø—É—â–µ–Ω–æ {skipped} —Å—Ç—Ä–æ–∫ (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ)")
    logger.info(f"üì¶ –ö –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(tasks)} –ø–æ–∑–∏—Ü–∏–π")

    progress_checkpoints = {
        math.ceil(len(tasks) * 0.25),
        math.ceil(len(tasks) * 0.50),
        math.ceil(len(tasks) * 0.75),
        len(tasks)
    }
    sent_progress = set()

    if not tasks:
        logger.info("‚úÖ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º")
        adjust_prices_and_save(df, OUTPUT_FILE)
        # send_result_to_telegram(OUTPUT_FILE, processed_count, processed_count)
        return



    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    with ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
        futures = [executor.submit(process_row, task) for task in tasks]
        for future in tqdm(as_completed(futures), total=len(futures), desc="üîç –ü–∞—Ä—Å–∏–Ω–≥"):
            try:
                idx, result = future.result()
                if result:
                    for col, value in result.items():
                        df.at[idx, col] = value
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                    # cache[get_cache_key(df.iloc[idx, 3], df.iloc[idx, 1])] = result

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –æ—á–µ—Ä–µ–¥–Ω–æ–π —á–µ—Ç–≤–µ—Ä—Ç–∏
                processed_count += 1
                if processed_count in progress_checkpoints and processed_count not in sent_progress:
                    percent = int(processed_count / len(tasks) * 100)
                    send_telegram_process(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {percent}% ({processed_count} –∏–∑ {len(tasks)})")
                    sent_progress.add(processed_count)    

                
                if processed_count % SAVE_INTERVAL == 0:
                    df.to_excel(TEMP_FILE, index=False)
                    save_state(idx, processed_count)
                    # save_cache(cache)
                    logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å: —Å—Ç—Ä–æ–∫–∞ {idx}")

            except Exception as e:
                send_telegram_error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    try:
        
        adjust_prices_and_save(df, OUTPUT_FILE)
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {OUTPUT_FILE}")

        

        if Path(OUTPUT_FILE).exists():
            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ Telegram...")
            # send_result_to_telegram(OUTPUT_FILE, processed_count, processed_count)

        # –û—á–∏—Å—Ç–∫–∞
        # if Path(TEMP_FILE).exists():
        #     Path(TEMP_FILE).unlink()
        #     logger.info(f"üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {TEMP_FILE} —É–¥–∞–ª—ë–Ω")



        # logger.info(f"üîÑ rows_to_process - {len(tasks)} --------processed_count - {processed_count}")

        new_tasks_count = len(tasks)
        new_processed = processed_count - state['processed_count']

        if new_tasks_count > 0 and new_processed >= new_tasks_count:
            logger.info("üîÑ –í—Å–µ –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –°–±—Ä–∞—Å—ã–≤–∞–µ–º state –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞.")
            save_state(-1, 0)

        logger.info(f"üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {processed_count} —Å—Ç—Ä–æ–∫")
        # === –û—á–∏—Å—Ç–∫–∞ –∫—É–∫–æ–≤ ===


        if COOKIE_FILES.exists():
            try:
                COOKIE_FILES.unlink()
                logger.info("üßπ –ö—É–∫–∏ –æ—á–∏—â–µ–Ω—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫—É–∫–∏: {e}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        send_telegram_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

if __name__ == "__main__":
    main()