mport logging import os from pathlib import Path from telegram import Update from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes from dotenv import load_dotenv import subprocess import traceback

load_dotenv()

–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', '8364237483:AAERd9UAqQO_EAPt62AepFSojT41v9Vmw3s') ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID', '-4688651319')) INPUT_DIR = Path('input') INPUT_FILE = INPUT_DIR / '–Ω–∞–ª–∏—á–∏–µ.xls'

–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig( level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s' ) logger = logging.getLogger(name)

–°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é input –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
INPUT_DIR.mkdir(exist_ok=True)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE): """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start""" await update.message.reply_text( "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π.\n\n" "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" "/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" "/–Ω–∞–ª–∏—á–∏–µ - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n" "üìé –ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /parse " "–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª .xls –∏–ª–∏ .xlsx" )

async def nalichie_command(update: Update, context: ContextTypes.DEFAULT_TYPE): """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /parse""" await update.message.reply_text( "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –Ω–∞–ª–∏—á–∏–µ.xls –∏–ª–∏ –Ω–∞–ª–∏—á–∏–µ.xlsx\n" "–§–∞–π–ª –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏." )

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
try:
document = update.message.document
# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
file_name = document.file_name.lower()
if not (file_name.endswith('.xls') or file_name.endswith('.xlsx')):
await update.message.reply_text(
"‚ùå –û—à–∏–±–∫–∞: –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .xls –∏–ª–∏ .xlsx"
)
return
# –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")
file = await context.bot.get_file(document.file_id)
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
# original_ext = Path(file_name).suffix
target_file = INPUT_DIR / '–Ω–∞–ª–∏—á–∏–µ.xls'
await file.download_to_drive(target_file)
logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {target_file}")
await update.message.reply_text(
f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n"
f"üìÅ –°–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫: {target_file.name}\n"
f"üìä –†–∞–∑–º–µ—Ä: {document.file_size / 1024:.2f} KB\n\n"
f"–§–∞–π–ª –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–µ—Ä–∞."
)
# subprocess.Popen(['python', 'main-parser.py'])
subprocess.Popen([r'env\Scripts\python.exe', 'main-parser.py'])
await update.message.reply_text("üöÄ –ó–∞–ø—É—â–µ–Ω –ø–∞—Ä—Å–µ—Ä, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")
except Exception as e:
logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}\n{traceback.format_exc()}")
await update.message.reply_text(
f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"
)
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE): """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤""" try: document = update.message.document

    file_name = document.file_name.lower()
    if not (file_name.endswith(&#39;.xls&#39;) or file_name.endswith(&#39;.xlsx&#39;)):
        await update.message.reply_text(&quot;‚ùå –û—à–∏–±–∫–∞: –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .xls –∏–ª–∏ .xlsx&quot;)
        return
    
    await update.message.reply_text(&quot;‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...&quot;)
    file = await context.bot.get_file(document.file_id)
    target_file = INPUT_DIR / &#39;–Ω–∞–ª–∏—á–∏–µ.xls&#39;
    await file.download_to_drive(target_file)
    logger.info(f&quot;–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {target_file}&quot;)

    await update.message.reply_text(
        f&quot;‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω!\n&quot;
        f&quot;üìÅ –°–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫: {target_file.name}\n&quot;
        f&quot;üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–µ—Ä...&quot;
    )

    # === –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä –∏ –ñ–î–Å–ú –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ===
    result = subprocess.run(
        [r&#39;env\Scripts\python.exe&#39;, &#39;main-parser.py&#39;],
        capture_output=True,
        text=True,
        encoding=&#39;utf-8&#39;
    )

    if result.returncode == 0:
        logger.info(&quot;‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ&quot;)
        await update.message.reply_text(&quot;‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω. –ò—â—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç...&quot;)
        
        output_file = &#39;output/–Ω–∞–ª–∏—á–∏–µ_with_competitors.xlsx&#39;
        if Path(output_file).exists():
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await send_result_file(
                BOT_TOKEN,
                update.effective_chat.id,  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç
                output_file,
                caption=&quot;‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏&quot;
            )
        else:
            await update.message.reply_text(&quot;‚ùå –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!&quot;)
    else:
        logger.error(f&quot;‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {result.stderr}&quot;)
        await update.message.reply_text(
            f&quot;‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞:\n&quot;,
            parse_mode=&#39;Markdown&#39;
        )

except Exception as e:
    logger.error(f&quot;–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}\n{traceback.format_exc()}&quot;)
    await update.message.reply_text(f&quot;‚ùå –û—à–∏–±–∫–∞: {str(e)}&quot;)
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE): """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π""" text = update.message.text.lower().strip()

if text == &quot;parse&quot;:
    await nalichie_command(update, context)
else:
    await update.message.reply_text(
        &quot;‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥&quot;
    )
async def send_result_file(bot_token: str, chat_id: int, file_path: str, caption: str = None): """ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ –≤ Telegram —á–∞—Ç

Args:
    bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞
    chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    caption: –ü–æ–¥–ø–∏—Å—å –∫ —Ñ–∞–π–ª—É
&quot;&quot;&quot;
from telegram import Bot

try:
    bot = Bot(token=bot_token)
    
    with open(file_path, &#39;rb&#39;) as file:
        await bot.send_document(
            chat_id=chat_id,
            document=file,
            caption=caption or f&quot;‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\nüìÑ –§–∞–π–ª: {Path(file_path).name}&quot;,
            filename=Path(file_path).name
        )
    
    logger.info(f&quot;–§–∞–π–ª {file_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}&quot;)
    return True
    
except Exception as e:
    logger.error(f&quot;–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –≤ Telegram: {e}&quot;)
    return False
def main(): """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞""" logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")

# –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
application = Application.builder().token(BOT_TOKEN).build()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
application.add_handler(CommandHandler(&quot;start&quot;, start_command))
application.add_handler(CommandHandler(&quot;parse&quot;, nalichie_command))
application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
application.add_handler(MessageHandler(filters.TEXT &amp; ~filters.COMMAND, handle_text))

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
logger.info(&quot;‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ&quot;)
application.run_polling(allowed_updates=Update.ALL_TYPES)
if name == "main": main()