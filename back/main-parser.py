import time
import re
import logging
import asyncio
from pathlib import Path
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By

from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from twocaptcha import TwoCaptcha
from dotenv import load_dotenv
import os

from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager

from openpyxl.styles import PatternFill
from openpyxl.utils.dataframe import dataframe_to_rows
from openpyxl import load_workbook

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
API_KEY_2CAPTCHA = os.getenv('API_KEY_2CAPTCHA', 'your_api_key_here')
AVTO_LOGIN = os.getenv('AVTO_LOGIN', 'your_login_here')
AVTO_PASSWORD = os.getenv('AVTO_PASSWORD', 'your_password_here')

# Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv('BOT_TOKEN', '8364237483:AAERd9UAqQO_EAPt62AepFSojT41v9Vmw3s')
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID', '-4688651319'))
SEND_TO_TELEGRAM = os.getenv('SEND_TO_TELEGRAM', 'True').lower() == 'true'

INPUT_FILE = 'input/–Ω–∞–ª–∏—á–∏–µ.xls'
OUTPUT_FILE = 'output/–Ω–∞–ª–∏—á–∏–µ_with_competitors.xlsx'
TEMP_FILE = 'output/–Ω–∞–ª–∏—á–∏–µ_temp.xlsx'
MAX_ROWS = 500
SAVE_INTERVAL = 10

# –¢–∞–π–º–∞—É—Ç—ã –∏ –∑–∞–¥–µ—Ä–∂–∫–∏
PAGE_LOAD_TIMEOUT = 60
DEFAULT_WAIT = 15
REQUEST_DELAY = 1.5
CAPTCHA_WAIT = 5

# Retry –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
MAX_RETRIES = 3
RETRY_DELAY = 2

competitor1 = 'stparts_price'
competitor1_delivery = 'stparts_delivery'
competitor2 = 'avtoformula_price'
competitor2_delivery = 'avtoformula_delivery'
corrected_price='corrected_price'
input_price = 5

# CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
SELECTORS = {
    'stparts': {
        'captcha_img': 'img.captchaImg',
        'captcha_input': "input[name='captcha']",
        'captcha_submit': 'captchaSubmitBtn',
        'results_table': 'table.globalResult.searchResultsSecondStep',
        'result_row': 'tr.resultTr2',
        'brand': 'td.resultBrand',
        'delivery': 'td.resultDeadline',
        'price': 'td.resultPrice'
    },
    'avtoformula': {
        'login_field': 'userlogin',
        'password_field': 'userpassword',
        'login_button': "input[type='submit'][name='login']",
        'article_field': 'article',
        'search_button': 'input[name="search"][data-action="ajaxSearch"]',
        'smode_select': 'smode',
        'results_table': 'table.web_ar_datagrid.search_results',
        'brand_cell': 'td.td_prd_info_link',
        'delivery_cell': 'td.td_term',
        'price_cell': 'td.td_final_price'
    }
}

# ==================== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ====================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('parser.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


# ==================== TELEGRAM –§–£–ù–ö–¶–ò–ò ====================
async def send_telegram_file(file_path, caption=None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ Telegram"""
    from telegram import Bot
    
    try:
        bot = Bot(token=BOT_TOKEN)
        
        file_size = Path(file_path).stat().st_size / 1024  # KB
        
        default_caption = (
            f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üìÑ –§–∞–π–ª: {Path(file_path).name}\n"
            f"üìä –†–∞–∑–º–µ—Ä: {file_size:.2f} KB"
        )
        
        with open(file_path, 'rb') as file:
            await bot.send_document(
                chat_id=ADMIN_CHAT_ID,
                document=file,
                caption=caption or default_caption,
                filename=Path(file_path).name
            )
        
        logger.info(f"‚úÖ –§–∞–π–ª {file_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram (—á–∞—Ç {ADMIN_CHAT_ID})")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –≤ Telegram: {e}")
        return False


def send_result_to_telegram(file_path, processed_count=0, total_count=0):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞"""
    if not SEND_TO_TELEGRAM:
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –æ—Ç–∫–ª—é—á–µ–Ω–∞ (SEND_TO_TELEGRAM=False)")
        return
    
    caption = (
        f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üìÑ –§–∞–π–ª: {Path(file_path).name}\n"
        f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count}/{total_count} –ø–æ–∑–∏—Ü–∏–π\n"
        f"üì¶ –†–∞–∑–º–µ—Ä: {Path(file_path).stat().st_size / 1024:.2f} KB"
    )
    
    try:
        asyncio.run(send_telegram_file(file_path, caption))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")


# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================
def setup_driver():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ WebDriver"""
    options = webdriver.ChromeOptions()
    options.add_argument("--headless=False")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option('useAutomationExtension', False)
    options.add_argument(
        "user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
        "AppleWebKit/537.36 (KHTML, like Gecko) "
        "Chrome/115.0.0.0 Safari/537.36"
    )
    
    try:
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=options)
        driver.set_page_load_timeout(PAGE_LOAD_TIMEOUT)
        logger.info("WebDriver —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return driver
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ WebDriver: {e}")
        raise


def parse_price(text):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    if not text or not isinstance(text, str):
        return None
    
    clean = re.sub(r"[^\d,\.\s]", "", text).strip()
    clean = clean.replace(" ", "")
    
    if clean.count(",") == 1 and clean.count(".") == 0:
        clean = clean.replace(",", ".")
    elif clean.count(",") > 1:
        clean = clean.replace(",", "")
    
    try:
        return float(clean)
    except (ValueError, AttributeError):
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ü–µ–Ω—É: {text}")
        return None


def preprocess_dataframe(df):
    """–£–¥–∞–ª—è–µ—Ç —Å–ª–µ—à–∏ –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ –±—Ä–µ–Ω–¥–∞"""
    try:
        brand_col_idx = 2
        if len(df.columns) > brand_col_idx:
            df.iloc[:, brand_col_idx] = (
                df.iloc[:, brand_col_idx]
                  .astype(str)
                  .str.replace('/', '', regex=False)
                  .str.replace('\\', '', regex=False)
                  .str.strip()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    return df


def normalize_brand(brand_str):
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –±—Ä–µ–Ω–¥–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    if not brand_str:
        return ""
    return re.sub(r'[^a-z0-9]', '', str(brand_str).lower())


def brand_matches(search_brand, result_brand):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –±—Ä–µ–Ω–¥–∞ (–¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è)"""
    if not search_brand or not result_brand:
        return False
    
    norm_search = normalize_brand(search_brand)
    norm_result = normalize_brand(result_brand)
    
    return norm_search in norm_result or norm_result in norm_search


def save_progress(df, filename=TEMP_FILE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    try:
        df.to_excel(filename, index=False)
        logger.info(f"–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {filename}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")


def retry_on_failure(func, *args, max_retries=MAX_RETRIES, **kwargs):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
    for attempt in range(max_retries):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            if attempt < max_retries - 1:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {RETRY_DELAY}—Å")
                time.sleep(RETRY_DELAY)
            else:
                logger.error(f"–í—Å–µ {max_retries} –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è {func.__name__}")
                raise


# ==================== –†–ê–ë–û–¢–ê –° –ö–ê–ü–ß–ï–ô ====================
def solve_image_captcha(driver):
    """–†–µ—à–µ–Ω–∏–µ –∫–∞–ø—á–∏ —á–µ—Ä–µ–∑ 2Captcha"""
    try:
        solver = TwoCaptcha(API_KEY_2CAPTCHA)
        
        img_el = driver.find_element(By.CSS_SELECTOR, SELECTORS['stparts']['captcha_img'])
        captcha_base64 = img_el.screenshot_as_base64

        logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ø—á—É –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤ 2Captcha")
        result = solver.normal(captcha_base64)
        captcha_text = result['code']
        logger.info(f"–ö–∞–ø—á–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: {captcha_text}")

        input_el = driver.find_element(By.CSS_SELECTOR, SELECTORS['stparts']['captcha_input'])
        input_el.clear()
        input_el.send_keys(captcha_text)

        submit_btn = driver.find_element(By.ID, SELECTORS['stparts']['captcha_submit'])
        submit_btn.click()
        time.sleep(CAPTCHA_WAIT)

        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏: {e}")
        return False


# ==================== –ü–ê–†–°–ò–ù–ì STPARTS.RU ====================
def scrape_stparts(driver, brand, part):
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å stparts.ru"""
    url = f"https://stparts.ru/search/{brand}/{part}"
    
    try:
        driver.get(url)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {url}")
        
        if len(driver.find_elements(By.CSS_SELECTOR, SELECTORS['stparts']['captcha_img'])) > 0:
            logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞ –Ω–∞ stparts.ru")
            if not solve_image_captcha(driver):
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å –∫–∞–ø—á—É")

        wait = WebDriverWait(driver, DEFAULT_WAIT)

        wait.until(EC.presence_of_element_located(
            (By.CSS_SELECTOR, SELECTORS['stparts']['results_table'])))
        
        table = driver.find_element(By.CSS_SELECTOR, SELECTORS['stparts']['results_table'])
        wait.until(lambda d: len(d.find_elements(
            By.CSS_SELECTOR, SELECTORS['stparts']['result_row'])) > 0)
        
        rows = table.find_elements(By.CSS_SELECTOR, SELECTORS['stparts']['result_row'])
        
        if not rows:
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {brand} / {part}")
            return None, None

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        for priority_search in [True, False]:
            for row in rows:
                try:
                    brand_td = row.find_element(By.CSS_SELECTOR, SELECTORS['stparts']['brand'])
                    brand_in_row = brand_td.text.strip()
                    
                    if not brand_matches(brand, brand_in_row):
                        continue

                    delivery_td = row.find_element(By.CSS_SELECTOR, SELECTORS['stparts']['delivery'])
                    delivery_min = delivery_td.text.strip()

                    if priority_search and not re.match(r"^1(\D|$)", delivery_min):
                        continue

                    price_text = row.find_element(By.CSS_SELECTOR, SELECTORS['stparts']['price']).text
                    price = parse_price(price_text)
                    
                    if price is not None:
                        if priority_search:
                            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–ª–∏—á–∏–∏ (–±—Ä–µ–Ω–¥: {brand_in_row}, —Å—Ä–æ–∫ {delivery_min}): {price} ‚ÇΩ")
                        else:
                            logger.info(f"–ù–∞–π–¥–µ–Ω–æ (–±—Ä–µ–Ω–¥: {brand_in_row}, —Å—Ä–æ–∫ {delivery_min}): {price} ‚ÇΩ")
                        return price, delivery_min
                        
                except NoSuchElementException:
                    continue

        logger.info(f"–ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {brand} / {part}")
        return None, None

    except TimeoutException:
        logger.error(f"Timeout –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {brand} / {part}")
        return None, None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ stparts –¥–ª—è {brand} / {part}: {e}")
        return None, None


# ==================== –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø AVTOFORMULA ====================
def login_avtoformula(driver, login, password):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ avtoformula.ru"""
    login_url = "https://www.avtoformula.ru"
    
    try:
        driver.get(login_url)
        wait = WebDriverWait(driver, DEFAULT_WAIT)

        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –Ω–∞ avtoformula.ru")
        
        login_el = wait.until(EC.element_to_be_clickable(
            (By.ID, SELECTORS['avtoformula']['login_field'])))
        login_el.clear()
        login_el.send_keys(login)

        password_el = driver.find_element(By.ID, SELECTORS['avtoformula']['password_field'])
        password_el.clear()
        password_el.send_keys(password)

        submit_btn = driver.find_element(By.CSS_SELECTOR, SELECTORS['avtoformula']['login_button'])
        submit_btn.click()

        wait.until(EC.invisibility_of_element((By.ID, SELECTORS['avtoformula']['login_field'])))
        logger.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")

        time.sleep(2)
        wait.until(EC.element_to_be_clickable((By.ID, SELECTORS['avtoformula']['smode_select'])))
        smode_select = driver.find_element(By.ID, SELECTORS['avtoformula']['smode_select'])
        
        for option in smode_select.find_elements(By.TAG_NAME, "option"):
            if option.get_attribute("value") == "A0":
                option.click()
                logger.info("–û–ø—Ü–∏—è '–±–µ–∑ –∞–Ω–∞–ª–æ–≥–æ–≤' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                break

        return True
        
    except TimeoutException:
        logger.error("Timeout –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ avtoformula.ru")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ avtoformula.ru: {e}")
        return False


# ==================== –ü–ê–†–°–ò–ù–ì AVTOFORMULA.RU ====================
def scrape_avtoformula(driver, brand, part):
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å avtoformula.ru"""
    try:
        wait = WebDriverWait(driver, DEFAULT_WAIT)
        driver.get("https://www.avtoformula.ru")

        article_field = wait.until(EC.element_to_be_clickable(
            (By.ID, SELECTORS['avtoformula']['article_field'])))
        article_field.clear()
        article_field.send_keys(part)
        logger.info(f"–í–≤–µ–¥—ë–Ω –∞—Ä—Ç–∏–∫—É–ª: {part}")

        search_btn = driver.find_element(By.CSS_SELECTOR, SELECTORS['avtoformula']['search_button'])
        search_btn.click()

        wait.until(EC.presence_of_element_located(
            (By.CSS_SELECTOR, SELECTORS['avtoformula']['results_table'])))
        
        rows = driver.find_elements(By.CSS_SELECTOR, 
            f"{SELECTORS['avtoformula']['results_table']} tr")
        
        if not rows or len(rows) < 2:
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {brand} / {part}")
            return None, None

        min_delivery = None
        min_price = None

        for row in rows[1:]:
            try:
                brand_td = row.find_element(By.CSS_SELECTOR, SELECTORS['avtoformula']['brand_cell'])
                brand_in_row = brand_td.text.strip()
                
                if not brand_matches(brand, brand_in_row):
                    continue

                delivery_td = row.find_element(By.CSS_SELECTOR, SELECTORS['avtoformula']['delivery_cell'])
                delivery_text = delivery_td.text.strip().split('/')[0].strip()
                
                try:
                    delivery_days = int(delivery_text)
                except (ValueError, IndexError):
                    continue

                price_td = row.find_element(By.CSS_SELECTOR, SELECTORS['avtoformula']['price_cell'])
                price = parse_price(price_td.text.strip())
                
                if price is None:
                    continue

                if min_delivery is None or delivery_days < min_delivery:
                    min_delivery = delivery_days
                    min_price = price
                    
            except NoSuchElementException:
                continue

        if min_delivery is not None:
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ: {min_delivery} –¥–Ω–µ–π, —Ü–µ–Ω–∞ {min_price} ‚ÇΩ")
            return min_price, f"{min_delivery} –¥–Ω–µ–π"
        
        logger.info(f"–ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {brand} / {part}")
        return None, None

    except TimeoutException:
        logger.error(f"Timeout –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–∞ avtoformula –¥–ª—è {brand} / {part}")
        return None, None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ avtoformula –¥–ª—è {brand} / {part}: {e}")
        return None, None




def adjust_prices_and_save(df, output_file, original_price_col=input_price, competitor_price_cols=(competitor1, competitor2), competitor_delivery_cols=(competitor1_delivery, competitor2_delivery), corrected_col=corrected_price):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–æ–ª–±–µ—Ü —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–π —Ü–µ–Ω–æ–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç DataFrame —Å —Ü–≤–µ—Ç–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    
    :param df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
    :param output_file: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è xlsx
    :param original_price_col: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –≤–∞—à–µ–π —Ü–µ–Ω–æ–π
    :param competitor_price_cols: –ö–æ—Ä—Ç–µ–∂ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–ª–æ–Ω–æ–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ (—Ü–µ–Ω)
    :param competitor_delivery_cols: –ö–æ—Ä—Ç–µ–∂ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–ª–æ–Ω–æ–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ (–¥–æ—Å—Ç–∞–≤–æ–∫)
    :param corrected_col: –ò–º—è –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã
    """

    def parse_delivery_days(delivery_str):
        """–ü–∞—Ä—Å–∏—Ç —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ 'X –¥–Ω–µ–π' –≤ int –∏–ª–∏ None"""
        if not delivery_str or not isinstance(delivery_str, str):
            return None
        m = re.search(r'(\d+)', delivery_str)
        if m:
            return int(m.group(1))
        return None

    corrected_prices = []
    for idx, row in df.iterrows():
        try:
            our_price = float(row[original_price_col]) if pd.notna(row[original_price_col]) else None
            # print('our_price-----------',our_price)
            competitor_prices = []
            for price_col, delivery_col in zip(competitor_price_cols, competitor_delivery_cols):
                comp_price = row.get(price_col)

                # print('comp_price-----------',comp_price)
                # print(df.columns.tolist())

                comp_delivery = row.get(delivery_col)
                if pd.isna(comp_price) or pd.isna(comp_delivery):
                    continue
                comp_price = float(comp_price)
                delivery_days = parse_delivery_days(comp_delivery)
                if delivery_days is None:
                    continue
                # –£—Å–ª–æ–≤–∏–µ: —Å—Ä–æ–∫ 1-4 –¥–Ω—è ‚Äî —Å—á–∏—Ç–∞–µ–º —Ü–µ–Ω—É
                if 1 <= delivery_days <= 4:
                    competitor_prices.append(comp_price)
            if not competitor_prices or our_price is None:
                # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
                corrected_prices.append(our_price)
                continue
            
            min_competitor_price = min(competitor_prices)
            
            # –ï—Å–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è —Ü–µ–Ω–∞ –º–µ–Ω—å—à–µ –Ω–∞—à–µ–π - —É–º–µ–Ω—å—à–∏—Ç—å –Ω–∞ 2 —Ä—É–±–ª—è
            if our_price > min_competitor_price:
                new_price = round(min_competitor_price - 2, 2)
                if new_price < 0:
                    new_price = 0.0
                corrected_prices.append(new_price)
            else:
                corrected_prices.append(our_price)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {idx}: {e}")
            corrected_prices.append(row[original_price_col])
    
    df[corrected_col] = corrected_prices

    # –ø–µ—Ä–µ—Å–æ—Ö—Ä–∞–Ω—è–µ–º DataFrame —á—Ç–æ–±—ã –∫–æ–ª–æ–Ω–∫–∞ –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ—è–≤–∏–ª–∞—Å—å –≤ —Ñ–∞–π–ª–µ
    df.to_excel(output_file, index=False)

    # print(df)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    wb = load_workbook(output_file)
    ws = wb.active
    
    # –ù–∞–π–¥—ë–º –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ —Å corrected_col
    max_col = ws.max_column
    max_row = ws.max_row
    header_row = 1
    col_idx = None
    for col in range(1, max_col + 1):
        cell_val = ws.cell(row=header_row, column=col).value
        if cell_val == corrected_col:
            col_idx = col
            break
    if col_idx is None:
        logger.warning(f"–ö–æ–ª–æ–Ω–∫–∞ {corrected_col} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏")
        wb.save(output_file)
        return

    red_fill = PatternFill(start_color='FFC7CE', end_color='FFC7CE', fill_type='solid')  # –∫—Ä–∞—Å–Ω—ã–π
    green_fill = PatternFill(start_color='C6EFCE', end_color='C6EFCE', fill_type='solid')  # –∑–µ–ª—ë–Ω—ã–π

    # –¶–≤–µ—Ç –¥–ª—è —è—á–µ–µ–∫: –∫—Ä–∞—Å–Ω—ã–π, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–∏–∂–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞; –∑–µ–ª—ë–Ω—ã–π ‚Äî –µ—Å–ª–∏ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
    for row in range(2, max_row + 1):
        original_price = ws.cell(row=row, column=ws.min_column + df.columns.get_loc(original_price_col)).value
        corrected_price = ws.cell(row=row, column=col_idx).value
        if original_price is None or corrected_price is None:
            continue
        try:
            if float(corrected_price) < float(original_price):
                ws.cell(row=row, column=col_idx).fill = red_fill
            else:
                ws.cell(row=row, column=col_idx).fill = green_fill
        except:
            pass

    wb.save(output_file)
    logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–æ–π —Ü–µ–Ω –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º: {output_file}")





# ==================== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ====================
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("=" * 60)
    logger.info("–ó–ê–ü–£–°–ö –ü–ê–†–°–ï–†–ê –ê–í–¢–û–ó–ê–ü–ß–ê–°–¢–ï–ô")
    logger.info("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if not Path(INPUT_FILE).exists():
        logger.error(f"–§–∞–π–ª {INPUT_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ credentials
    if API_KEY_2CAPTCHA == 'your_api_key_here':
        logger.warning("‚ö†Ô∏è API –∫–ª—é—á 2Captcha –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
    if AVTO_LOGIN == 'your_login_here':
        logger.warning("‚ö†Ô∏è –õ–æ–≥–∏–Ω Avtoformula –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    try:
        df = pd.read_excel(INPUT_FILE)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –∏–∑ {INPUT_FILE}")

        df = preprocess_dataframe(df)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return
    


    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    for col in [competitor1, competitor1_delivery, competitor2, competitor2_delivery]:
        if col not in df.columns:
            df[col] = ""
    
    driver = None
    processed_count = 0
    
    try:
        driver = setup_driver()
        
        if not login_avtoformula(driver, AVTO_LOGIN, AVTO_PASSWORD):
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ avtoformula.ru")
            return
        
        rows_to_process = df.head(MAX_ROWS)
        total_rows = len(rows_to_process)
        
        for idx, row in rows_to_process.iterrows():
            try:
                part = str(row[1]).strip()
                brand = str(row[3]).strip()
                
                if not part or not brand or part == 'nan' or brand == 'nan':
                    logger.warning(f"–°—Ç—Ä–æ–∫–∞ {idx + 1}: –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ)")
                    continue
                
                logger.info(f"\n{'=' * 60}")
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {processed_count + 1}/{total_rows}: {brand} / {part}")
                logger.info(f"{'=' * 60}")
                
                logger.info("‚Üí –ü–æ–∏—Å–∫ –Ω–∞ stparts.ru")
                price_st, delivery_st = retry_on_failure(scrape_stparts, driver, brand, part)
                
                if price_st is not None:
                    df.at[idx, competitor1] = round(price_st, 2)
                if delivery_st is not None:
                    df.at[idx, competitor1_delivery] = delivery_st
                
                logger.info("‚Üí –ü–æ–∏—Å–∫ –Ω–∞ avtoformula.ru")
                price_avto, delivery_avto = retry_on_failure(scrape_avtoformula, driver, brand, part)
                
                if price_avto is not None:
                    df.at[idx, competitor2] = round(price_avto, 2)
                if delivery_avto is not None:
                    df.at[idx, competitor2_delivery] = delivery_avto
                
                processed_count += 1
                
                if processed_count % SAVE_INTERVAL == 0:
                    save_progress(df)
                
                time.sleep(REQUEST_DELAY)
                
            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {idx + 1}: {e}")
                save_progress(df)
                continue
        
        logger.info(f"\n{'=' * 60}")
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {processed_count}/{total_rows} —Å—Ç—Ä–æ–∫")
        logger.info(f"{'=' * 60}")
        
    except KeyboardInterrupt:
        logger.warning("\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        save_progress(df)
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        save_progress(df)
        
    finally:
        if driver:
            driver.quit()
            logger.info("WebDriver –∑–∞–∫—Ä—ã—Ç")
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        try:
            df.to_excel(OUTPUT_FILE, index=False)
            logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {OUTPUT_FILE}")
            

            adjust_prices_and_save(df, OUTPUT_FILE, original_price_col=input_price, competitor_price_cols=(competitor1, competitor2), competitor_delivery_cols=(competitor1_delivery, competitor2_delivery), corrected_col=corrected_price)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ Telegram
            if Path(OUTPUT_FILE).exists():
                logger.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ Telegram...")
                send_result_to_telegram(OUTPUT_FILE, processed_count, total_rows)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")


if __name__ == "__main__":
    main()