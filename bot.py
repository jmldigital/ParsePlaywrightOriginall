
# bot.py
import logging
import os
from pathlib import Path
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
import subprocess
import traceback
import asyncio
from telegram import Bot
import telegram
import sys
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ –Ω–∞—à–µ–≥–æ –º–æ–¥—É–ª—è
from telegram_sender import send_telegram_file

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', '8364237483:AAERd9UAqQO_EAPt62AepFSojT41v9Vmw3s')
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID', '-4688651319'))
INPUT_DIR = Path('input')
INPUT_FILE = INPUT_DIR / '–Ω–∞–ª–∏—á–∏–µ.xls'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É input, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
INPUT_DIR.mkdir(exist_ok=True)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π.\n\n"
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/–Ω–∞–ª–∏—á–∏–µ - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n"
        "üìé –ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /parse "
        "–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª .xls –∏–ª–∏ .xlsx"
    )


async def nalichie_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /parse"""
    await update.message.reply_text(
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –Ω–∞–ª–∏—á–∏–µ.xls –∏–ª–∏ –Ω–∞–ª–∏—á–∏–µ.xlsx\n"
        "–§–∞–π–ª –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏."
    )


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º"""
    try:
        document = update.message.document
        file_name = document.file_name.lower()

        if not (file_name.endswith('.xls') or file_name.endswith('.xlsx')):
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .xls –∏–ª–∏ .xlsx")
            return

        await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")

        # === –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º ===
        max_retries = 3
        for attempt in range(1, max_retries + 1):
            try:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã: connect, read, write, pool
                file = await context.bot.get_file(
                    document.file_id,
                    read_timeout=30,
                    write_timeout=30,
                    connect_timeout=30,
                    pool_timeout=30
                )
                logger.info(f"‚úÖ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ {attempt})")
                break
            except telegram.error.TimedOut as e:
                logger.warning(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {attempt}/{max_retries}: {e}")
                if attempt == max_retries:
                    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª: —Ç–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.")
                    return
                await asyncio.sleep(3 * attempt)  # —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        # =============================================

        target_file = INPUT_DIR / '–Ω–∞–ª–∏—á–∏–µ.xls'
        await file.download_to_drive(target_file)
        logger.info(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {target_file}")

        await update.message.reply_text(
            f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω!\n"
            f"üìÅ –°–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫: {target_file.name}\n"
            f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–µ—Ä..."
        )



        # # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞
        # result = subprocess.run(
        #     [sys.executable, 'main.py'],
        #     capture_output=True,      # ‚Üê –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç stdout –∏ stderr
        #     text=True,                # ‚Üê –¥–µ–ª–∞–µ—Ç –∏—Ö —Å—Ç—Ä–æ–∫–∞–º–∏, –∞ –Ω–µ bytes
        #     encoding='utf-8',         # ‚Üê –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        
        # )

        # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —á—Ç–µ–Ω–∏–µ–º –≤—ã–≤–æ–¥–∞
        try:
            result = subprocess.run(
                [sys.executable, 'main.py'],
                capture_output=True,
               
                check=False   # –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ returncode != 0
            )
        except subprocess.TimeoutExpired as e:
            logger.error(f"‚ùå –ü–∞—Ä—Å–µ—Ä –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø–∞—Ä—Å–µ—Ä –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
            return

        # --- –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ stdout ---
        try:
            stdout = result.stdout.decode('utf-8')
        except UnicodeDecodeError:
            try:
                stdout = result.stdout.decode('cp1251')  # Windows-–∫–æ–¥–∏—Ä–æ–≤–∫–∞
            except:
                stdout = result.stdout.decode('latin1', errors='replace')  # fallback

        # --- –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ stderr ---
        try:
            stderr = result.stderr.decode('utf-8')
        except UnicodeDecodeError:
            try:
                stderr = result.stderr.decode('cp1251')
            except:
                stderr = result.stderr.decode('latin1', errors='replace')

        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
        print("----- STDOUT –ø–∞—Ä—Å–µ—Ä–∞ -----")
        print(stdout)
        print("----- STDERR –ø–∞—Ä—Å–µ—Ä–∞ -----")
        print(stderr)

        logger.info(f"‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è (–∫–æ–¥: {result.returncode})")



        # stdout = result.stdout.decode('cp1251', errors='replace')  # –ò–ª–∏ –≤–∞—à–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞
        # stderr = result.stderr.decode('cp1251', errors='replace')

        # print(stdout)
        # print(stderr)

        if result.returncode == 0:
            logger.info("‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ")
            output_file = 'output/–Ω–∞–ª–∏—á–∏–µ_with_competitors.xlsx'
            if Path(output_file).exists():
                await send_telegram_file(
                    file_path=output_file,
                    caption="‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏"
                )
            else:
                await update.message.reply_text("‚ùå –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {result.stderr}")
            error_msg = result.stderr[-3000:]
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –ø–∞—Ä—Å–µ—Ä–∞:\n",
                parse_mode='Markdown'
            )

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text.lower().strip()
    if text == "parse":
        await nalichie_command(update, context)
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    application = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("parse", nalichie_command))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
