# scraper_avtoformula_async.py
"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä avtoformula.ru —á–µ—Ä–µ–∑ Playwright
–° –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ-–ª–æ–≥–∏–Ω–∞, –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–ª–æ–≥–∏–Ω–∞
–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ "—Å –∞–Ω–∞–ª–æ–≥–∞–º–∏".
"""

import re
import time
from playwright.async_api import Page, TimeoutError as PlaywrightTimeout
from config import SELECTORS, AVTO_LOGIN, AVTO_PASSWORD
from utils import logger, parse_price, brand_matches
from auth import is_logged_in
import asyncio
import logging
from utils import get_site_logger
logger = get_site_logger("avtoformula")


MAX_WAIT_SECONDS = 45
CHECK_INTERVAL = 0.5  # —Å–µ–∫—É–Ω–¥—ã
AUTH_CHECK_INTERVAL = 10  # —Å–µ–∫




async def scrape_avtoformula_pw(page: Page, brand: str, part: str, logger: logging.Logger) -> tuple:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä avtoformula.ru —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ª–æ–≥–≥–µ—Ä–∞."""
    try:
        await page.goto("https://www.avtoformula.ru", wait_until="networkidle")
        logger.info(f"üåê –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: avtoformula.ru")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º "—Å –∞–Ω–∞–ª–æ–≥–∞–º–∏"
        try:
            mode_select = page.locator("#smode")
            await mode_select.wait_for(state="visible", timeout=5000)
            await mode_select.select_option("A0")
            logger.info("‚öôÔ∏è –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –±–µ–∑ –∞–Ω–∞–ª–æ–≥–æ–≤")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º '—Å –∞–Ω–∞–ª–æ–≥–∞–º–∏': {e}")

        # –í–≤–æ–¥ –∞—Ä—Ç–∏–∫—É–ª–∞
        article_field = page.locator(f"#{SELECTORS['avtoformula']['article_field']}")
        await article_field.wait_for(state="visible", timeout=10000)
        await article_field.fill(part)
        await page.locator(SELECTORS['avtoformula']['search_button']).click()
        logger.info(f"üîç –ü–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–∞: {part}")

        # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        start = time.time()
        while True:
            elapsed = time.time() - start


            # –ü—Ä–æ–≤–µ—Ä–∫–∞ "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            html = await page.content()
            if "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –ø–æ—Å—Ç–∞–≤–∫–∞—Ö" in html:
                logger.info(f"üö´ {brand}/{part} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None, None

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
            table = page.locator(SELECTORS['avtoformula']['results_table'])
            rows = table.locator("tr")
            count = await rows.count()
            if count > 1:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {count - 1}")
                break

            if elapsed > MAX_WAIT_SECONDS:
                logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {brand}/{part}")
                return None, None

            await asyncio.sleep(CHECK_INTERVAL)  # –Ω–µ wait_for_timeout

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        min_price, min_delivery = None, None
        count = await rows.count()
        for i in range(1, count):
            row = rows.nth(i)
            brand_in_row = (await row.locator(SELECTORS['avtoformula']['brand_cell']).text_content() or "").strip()
            if not brand_matches(brand, brand_in_row):
                continue

            delivery_text = (await row.locator(SELECTORS['avtoformula']['delivery_cell']).text_content() or "").strip()
            price_text = (await row.locator(SELECTORS['avtoformula']['price_cell']).text_content() or "").strip()

            delivery_days_match = re.search(r'\d+', delivery_text)
            if not delivery_days_match:
                continue
            delivery_days = int(delivery_days_match.group())

            price = parse_price(price_text)
            if price is None:
                continue

            if (
                min_delivery is None
                or delivery_days < min_delivery
                or (delivery_days == min_delivery and price < min_price)
            ):
                min_delivery, min_price = delivery_days, price

        if min_price:
            logger.info(f"üí∞ {brand}/{part}: {min_price} ‚ÇΩ ({min_delivery} –¥–Ω–µ–π)")
            return min_price, f"{min_delivery} –¥–Ω–µ–π"
        else:
            logger.info(f"‚ùå {brand}/{part}: –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return None, None

    except PlaywrightTimeout:
        logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {brand}/{part}")
        return None, None
    except Exception as e:
        error_msg = str(e).lower()
        if "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å" in error_msg or "–∞–≤—Ç–æ—Ä–∏–∑" in error_msg:
            logger.error(f"‚ùó –†–∞–∑–ª–æ–≥–∏–Ω: {e}")
            raise
        else:
            logger.error(f"‚ùó –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ avtoformula: {e}")
            return None, None



async def scrape_avtoformula_name_async(page: Page, part: str, logger: logging.Logger) -> str:
    """
    –ü–∞—Ä—Å–µ—Ä avtoformula.ru –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–∏ –ø–æ –Ω–æ–º–µ—Ä—É.
    """

    try:
        await page.goto("https://www.avtoformula.ru", wait_until="networkidle")
        logger.info(f"üåê –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: avtoformula.ru")

        # –í–≤–æ–¥ –∞—Ä—Ç–∏–∫—É–ª–∞
        article_field = page.locator(f"#{SELECTORS['avtoformula']['article_field']}")
        await article_field.wait_for(state="visible", timeout=10000)
        await article_field.fill(part)
        await page.locator(SELECTORS['avtoformula']['search_button']).click()
        logger.info(f"üîç –ü–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–∞: {part}")

        # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–æ–¥–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞)
        await page.wait_for_selector(SELECTORS['avtoformula']['results_table'], timeout=30000)

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–µ—Ç–∞–ª–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ td_spare_info
        first_desc_cell_selector = f"{SELECTORS['avtoformula']['results_table']} tr:nth-child(2) td.td_spare_info"
        first_desc = await page.locator(first_desc_cell_selector).text_content()

        if first_desc:
            description = first_desc.strip()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ avtoformula: {description}")
            return description
        else:
            logger.info(f"–ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ avtoformula –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {part}")
            return None

    except PlaywrightTimeout:
        logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {part}")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–∏ avtoformula –¥–ª—è {part}: {e}")
        # await page.screenshot(path=f"screenshots/error_name_avtoformula_{part}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.png")
        return None
