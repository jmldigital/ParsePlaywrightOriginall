import time
import re
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException, WebDriverException, TimeoutException
from config import SELECTORS, AVTO_LOGIN, AVTO_PASSWORD
from utils import logger, parse_price, brand_matches
from auth import ensure_logged_in, is_logged_in
import os
from datetime import datetime

# ==================== –†–ï–ñ–ò–ú –û–¢–õ–ê–î–ö–ò ====================
# –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HTML –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö:
# 1. –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ–∫—É: os.makedirs(DEBUG_HTML_DIR, exist_ok=True)
# 2. –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∫–æ–¥ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ save_page_source()
# 3. –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ–∫—É: return None (–≤ –∫–æ–Ω—Ü–µ save_page_source)
# =======================================================

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
MAX_WAIT_SECONDS = 120
CHECK_INTERVAL = 0.5  # —à–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
AUTH_CHECK_INTERVAL = 10  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HTML –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ)
DEBUG_HTML_DIR = "debug_html"
# os.makedirs(DEBUG_HTML_DIR, exist_ok=True)  # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –≤–º–µ—Å—Ç–µ —Å save_page_source


def save_page_source(driver, brand, part, reason="timeout"):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    # try:
    #     timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    #     filename = f"{DEBUG_HTML_DIR}/{reason}_{brand}_{part}_{timestamp}.html"
    #     
    #     with open(filename, "w", encoding="utf-8") as f:
    #         f.write(driver.page_source)
    #     
    #     logger.info(f"üíæ HTML —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filename}")
    #     
    #     # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–∏–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    #     screenshot_filename = filename.replace(".html", ".png")
    #     driver.save_screenshot(screenshot_filename)
    #     logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {screenshot_filename}")
    #     
    #     return filename
    # except Exception as e:
    #     logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HTML: {e}")
    #     return None
    
    # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ - —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ
    return None


def check_if_logged_out(driver):
    """
    –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–ª–∏—Å—å –ª–∏ –º—ã?
    –ò—â–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–∞–∑–ª–æ–≥–∏–Ω–∞.
    """
    try:
        # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        reg_link = driver.find_elements(By.XPATH, "//a[@href='/registration.html']")
        if reg_link and any(link.is_displayed() for link in reg_link):
            logger.warning("üö™ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–∞–∑–ª–æ–≥–∏–Ω - –Ω–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å'")
            return True
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ—Ç –ª–∏ —Ç–µ–∫—Å—Ç–∞ "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å"
        if "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å" in driver.page_source.lower():
            logger.warning("üö™ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–∞–∑–ª–æ–≥–∏–Ω - –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å'")
            return True
            
        return False
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–ª–æ–≥–∏–Ω–∞: {e}")
        return False


def check_page_state(driver):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –≤–µ—Ä–Ω—É—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    info = {
        "url": driver.current_url,
        "title": driver.title,
        "body_text_length": len(driver.find_element(By.TAG_NAME, "body").text),
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É/—Å–ø–∏–Ω–Ω–µ—Ä—ã
    try:
        loaders = driver.find_elements(By.CSS_SELECTOR, ".loader, .loading, .spinner, [class*='load']")
        info["loaders_found"] = len(loaders)
        info["loaders_visible"] = sum(1 for l in loaders if l.is_displayed())
    except:
        info["loaders_found"] = 0
        info["loaders_visible"] = 0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    try:
        modals = driver.find_elements(By.CSS_SELECTOR, ".modal, .popup, [class*='modal'], [class*='popup']")
        info["modals_found"] = len(modals)
        info["modals_visible"] = sum(1 for m in modals if m.is_displayed())
    except:
        info["modals_found"] = 0
        info["modals_visible"] = 0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    try:
        tables = driver.find_elements(By.TAG_NAME, "table")
        info["tables_count"] = len(tables)
    except:
        info["tables_count"] = 0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–ª–æ–≥–∏–Ω–∞
    info["logged_out"] = check_if_logged_out(driver)
    
    return info


def handle_relogin(driver, brand, part, login, password):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–æ–≥–∏–Ω–∞: —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫
    """
    logger.warning(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞ –¥–ª—è {brand} / {part}")
    
    if not login or not password:
        logger.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ-–ª–æ–≥–∏–Ω–∞ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ AVTO_LOGIN –∏ AVTO_PASSWORD –≤ config.py)")
        return False
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ä–µ-–ª–æ–≥–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ)
    # save_page_source(driver, brand, part, "before_relogin")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ auth –º–æ–¥—É–ª—è
        from auth import load_cookies
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫—É–∫–∏
        if load_cookies(driver) and is_logged_in(driver):
            logger.info("‚úÖ –†–µ-–ª–æ–≥–∏–Ω —á–µ—Ä–µ–∑ –∫—É–∫–∏ —É—Å–ø–µ—à–µ–Ω")
            return True
        
        # –ï—Å–ª–∏ –∫—É–∫–∏ –Ω–µ –ø–æ–º–æ–≥–ª–∏ - –ø–æ–ª–Ω—ã–π –ª–æ–≥–∏–Ω
        if ensure_logged_in(driver, login, password):
            logger.info("‚úÖ –†–µ-–ª–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω")
            return True
        
        logger.error("‚ùå –†–µ-–ª–æ–≥–∏–Ω –Ω–µ —É–¥–∞–ª—Å—è")
        return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ-–ª–æ–≥–∏–Ω–µ: {e}")
        return False


def repeat_search(driver, part):
    """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ —Ä–µ-–ª–æ–≥–∏–Ω–∞"""
    try:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        driver.get("https://www.avtoformula.ru")
        time.sleep(1)
        
        # –í–≤–æ–¥–∏–º –∞—Ä—Ç–∏–∫—É–ª –∑–∞–Ω–æ–≤–æ
        article_field = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, SELECTORS['avtoformula']['article_field']))
        )
        article_field.clear()
        article_field.send_keys(part)
        
        # –ö–ª–∏–∫–∞–µ–º –ø–æ –ø–æ–∏—Å–∫—É
        search_button = driver.find_element(By.CSS_SELECTOR, SELECTORS['avtoformula']['search_button'])
        search_button.click()
        logger.info(f"üîÑ –ü–æ–∏—Å–∫ –ø–æ–≤—Ç–æ—Ä—ë–Ω –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞: {part}")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return False


def scrape_avtoformula(driver, brand, part):
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å avtoformula.ru ‚Äî –∂–¥—ë—Ç –¥–æ 2 –º–∏–Ω—É—Ç, –ø–æ–∫–∞ –ø–æ—è–≤—è—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –∏–∑ config.py –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ-–ª–æ–≥–∏–Ω–∞"""
    
    # –ü–æ–ª—É—á–∞–µ–º credentials –∏–∑ config
    login = AVTO_LOGIN
    password = AVTO_PASSWORD
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ credentials –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
    if not login or login == 'your_login_here':
        logger.warning("‚ö†Ô∏è AVTO_LOGIN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ config.py - —Ä–µ-–ª–æ–≥–∏–Ω –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        login = None
        password = None
    
    try:
        driver.get("https://www.avtoformula.ru")
        time.sleep(1)

        # –í–≤–æ–¥ –∞—Ä—Ç–∏–∫—É–ª–∞
        try:
            article_field = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.ID, SELECTORS['avtoformula']['article_field']))
            )
            article_field.clear()
            article_field.send_keys(part)
            logger.info(f"–í–≤–µ–¥—ë–Ω –∞—Ä—Ç–∏–∫—É–ª: {part}")
        except TimeoutException:
            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞")
            save_page_source(driver, brand, part, "no_input_field")
            return None, None

        # –ü–æ–∏—Å–∫
        try:
            search_button = driver.find_element(By.CSS_SELECTOR, SELECTORS['avtoformula']['search_button'])
            search_button.click()
            logger.debug("–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ–∏—Å–∫–∞")
            time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
        except NoSuchElementException:
            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞")
            save_page_source(driver, brand, part, "no_search_button")
            return None, None

        # --- –¶–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
        start_time = time.time()
        status = None
        last_log_time = start_time
        last_auth_check_time = start_time
        check_count = 0
        relogin_attempted = False

        while True:
            check_count += 1
            elapsed = time.time() - start_time
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–µ AUTH_CHECK_INTERVAL —Å–µ–∫—É–Ω–¥
            if elapsed - (last_auth_check_time - start_time) >= AUTH_CHECK_INTERVAL:
                if check_if_logged_out(driver):
                    logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–∞–∑–ª–æ–≥–∏–Ω –Ω–∞ {elapsed:.1f}s")
                    
                    if not relogin_attempted and login and password:
                        relogin_attempted = True
                        
                        if handle_relogin(driver, brand, part, login, password):
                            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ-–ª–æ–≥–∏–Ω–∞
                            if repeat_search(driver, part):
                                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
                                start_time = time.time()
                                last_log_time = start_time
                                last_auth_check_time = start_time
                                check_count = 0
                                logger.info("üîÑ –ü–æ–∏—Å–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ —Ä–µ-–ª–æ–≥–∏–Ω–∞")
                                continue
                            else:
                                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ —Ä–µ-–ª–æ–≥–∏–Ω–∞")
                                save_page_source(driver, brand, part, "relogin_search_failed")
                                return None, None
                        else:
                            logger.error("‚ùå –†–µ-–ª–æ–≥–∏–Ω –Ω–µ —É–¥–∞–ª—Å—è")
                            save_page_source(driver, brand, part, "relogin_failed")
                            return None, None
                    else:
                        if relogin_attempted:
                            logger.error("‚ùå –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Ä–∞–∑–ª–æ–≥–∏–Ω –ø–æ—Å–ª–µ —Ä–µ-–ª–æ–≥–∏–Ω–∞")
                        else:
                            logger.error("‚ùå –†–∞–∑–ª–æ–≥–∏–Ω –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ–≥–∏–Ω–∞")
                        save_page_source(driver, brand, part, "logged_out")
                        return None, None
                
                last_auth_check_time = time.time()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            if elapsed - (last_log_time - start_time) >= 10:
                page_info = check_page_state(driver)
                logger.debug(f"‚è±Ô∏è {elapsed:.1f}s | –ü—Ä–æ–≤–µ—Ä–æ–∫: {check_count} | –°–æ—Å—Ç–æ—è–Ω–∏–µ: {page_info}")
                last_log_time = time.time()
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                if "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –ø–æ—Å—Ç–∞–≤–∫–∞—Ö –¥–∞–Ω–Ω–∞—è –¥–µ—Ç–∞–ª—å" in driver.page_source:
                    status = "no_results"
                    logger.info(f"üö´ –î–µ—Ç–∞–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ avtoformula –¥–ª—è {brand} / {part}")
                    break
                
                # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                rows = driver.find_elements(By.CSS_SELECTOR, f"{SELECTORS['avtoformula']['results_table']} tr")
                
                if check_count % 20 == 0:  # –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ (20 –ø—Ä–æ–≤–µ—Ä–æ–∫ * 0.5s)
                    logger.debug(f"–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(rows)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ (–±–æ–ª—å—à–µ 1 —Å—Ç—Ä–æ–∫–∏ = –µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ + –¥–∞–Ω–Ω—ã–µ)
                if len(rows) > 1:
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–∞—Ö
                    data_rows = [r for r in rows[1:] if r.text.strip()]
                    if data_rows:
                        status = "results"
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏: {len(data_rows)}")
                        break
                    else:
                        logger.debug(f"–¢–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞ ({len(rows)} —Å—Ç—Ä–æ–∫), –Ω–æ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ")

            except WebDriverException as e:
                logger.debug(f"WebDriverException –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ (–ø—Ä–æ–≤–µ—Ä–∫–∞ {check_count}): {e}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
            if elapsed > MAX_WAIT_SECONDS:
                logger.warning(f"‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è ({MAX_WAIT_SECONDS}s) –¥–ª—è {brand} / {part}")
                logger.warning(f"–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {check_count}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
                page_info = check_page_state(driver)
                logger.warning(f"–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_info}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç
                save_page_source(driver, brand, part, "timeout")
                
                status = "timeout"
                break

            time.sleep(CHECK_INTERVAL)

        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ ---
        if status == "no_results":
            return None, None

        if status == "timeout" or status is None:
            logger.warning(f"‚ö†Ô∏è –ò—Å—Ç–µ–∫–ª–æ –æ–∂–∏–¥–∞–Ω–∏–µ –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è {brand} / {part}")
            return None, None

        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã ---
        rows = driver.find_elements(By.CSS_SELECTOR, f"{SELECTORS['avtoformula']['results_table']} tr")
        if not rows or len(rows) < 2:
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {brand} / {part}")
            save_page_source(driver, brand, part, "no_data_in_table")
            return None, None

        min_delivery = None
        min_price = None
        rows_processed = 0
        rows_matched = 0

        for row in rows[1:]:
            rows_processed += 1
            try:
                brand_td = row.find_element(By.CSS_SELECTOR, SELECTORS['avtoformula']['brand_cell'])
                brand_in_row = brand_td.text.strip()
                
                if not brand_matches(brand, brand_in_row):
                    logger.debug(f"–ë—Ä–µ–Ω–¥ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: '{brand}' != '{brand_in_row}'")
                    continue
                
                rows_matched += 1

                delivery_td = row.find_element(By.CSS_SELECTOR, SELECTORS['avtoformula']['delivery_cell'])
                delivery_text = delivery_td.text.strip().split('/')[0].strip()
                try:
                    delivery_days = int(re.search(r'\d+', delivery_text).group())
                except (ValueError, AttributeError, TypeError):
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑: '{delivery_text}'")
                    continue

                price_td = row.find_element(By.CSS_SELECTOR, SELECTORS['avtoformula']['price_cell'])
                price = parse_price(price_td.text.strip())
                if price is None:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ü–µ–Ω—É –∏–∑: '{price_td.text.strip()}'")
                    continue

                if (
                    min_delivery is None or
                    delivery_days < min_delivery or
                    (delivery_days == min_delivery and price < min_price)
                ):
                    min_delivery = delivery_days
                    min_price = price

            except NoSuchElementException as e:
                logger.debug(f"–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ: {e}")
                continue

        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {rows_processed}, —Å–æ–≤–ø–∞–ª–æ –ø–æ –±—Ä–µ–Ω–¥—É: {rows_matched}")

        if min_delivery is not None:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {min_delivery} –¥–Ω–µ–π, —Ü–µ–Ω–∞ {min_price} ‚ÇΩ")
            return min_price, f"{min_delivery} –¥–Ω–µ–π"

        logger.info(f"–ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {brand} / {part}")
        save_page_source(driver, brand, part, "no_matching_results")
        return None, None

    except Exception as e:
        logger.error(f"‚ùó –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ avtoformula –¥–ª—è {brand} / {part}: {e}")
        save_page_source(driver, brand, part, "exception")
        return None, None